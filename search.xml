<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一个简单的UDP测试程序</title>
    <url>/2017/08/05/2017-08-05-A-UDP-code/</url>
    <content><![CDATA[<h1 id="一个简单的UDP测试程序"><a href="#一个简单的UDP测试程序" class="headerlink" title="一个简单的UDP测试程序"></a>一个简单的UDP测试程序</h1><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>这是一个简单的UDP测试程序，用于UDP数据包的发送、接收测试。</p>
<h4 id="它能干什么？"><a href="#它能干什么？" class="headerlink" title="它能干什么？"></a>它能干什么？</h4><p>它集成了客户端和服务端两个部分，可以通过命令行的启动参数进行状态转换。</p>
<p>它可以按照一定的时间进行UDP数据包的发送，也可以设定发送的UDP数据包的负载长度，当然也可以设定每一轮发送数据包的数量。此外，服务进程监听的端口号及客户进程发送时的目标端口也是可以设定的。</p>
<p>不过，需要确定的是，发送时的IP地址和端口号必须是可连通的。比如，发送端和接收端的设备应该处于同一个子网中，如果发生跨子网的情况，则无法成功进行数据传送。</p>
<a id="more"></a>

<h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#incnclude <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#incle <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> *l_opt_arg;</span><br><span class="line"><span class="keyword">char</span>* <span class="keyword">const</span> short_options = <span class="string">"c:l:i:srhp:a:y:"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct option</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  const char *name;</span></span><br><span class="line"><span class="comment">  int has_arg;</span></span><br><span class="line"><span class="comment">  int *flag;</span></span><br><span class="line"><span class="comment">  int val;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">long_options</span>[] = &#123;</span></span><br><span class="line">&#123; <span class="string">"count"</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">'c'</span> &#125;,</span><br><span class="line">&#123; <span class="string">"length"</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">'l'</span> &#125;,</span><br><span class="line">&#123; <span class="string">"interval"</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">'i'</span> &#125;,</span><br><span class="line">&#123; <span class="string">"port"</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">'p'</span> &#125;,</span><br><span class="line">&#123; <span class="string">"ip"</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">'a'</span> &#125;,</span><br><span class="line">&#123; <span class="string">"cycles"</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">'y'</span> &#125;,</span><br><span class="line">&#123; <span class="string">"send"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'s'</span> &#125;,</span><br><span class="line">&#123; <span class="string">"receive"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'r'</span> &#125;,</span><br><span class="line">&#123; <span class="string">"help"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'h'</span> &#125;,</span><br><span class="line">&#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHelp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ControlArguments</span>&#123;</span></span><br><span class="line">    <span class="keyword">bool</span> isSend;</span><br><span class="line">    <span class="keyword">bool</span> isReceive;</span><br><span class="line">    <span class="keyword">int</span> SendCount;    <span class="comment">//packets to send at one time,only for send option,default 1</span></span><br><span class="line">    <span class="keyword">int</span> PacketLength;   <span class="comment">//data length in UDP packet,only for send option,default 100</span></span><br><span class="line">    <span class="keyword">int</span> Interval;   <span class="comment">//time between send cycles.default is 20ms,only for send option</span></span><br><span class="line">    <span class="keyword">int</span> Port;   <span class="comment">//port used for transmit</span></span><br><span class="line">    <span class="keyword">int</span> Cycles; <span class="comment">//operation cycles,only for send option,default 10</span></span><br><span class="line">    <span class="keyword">char</span> IP[<span class="number">15</span>];  <span class="comment">//target ip address,only for send option</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendUDP</span><span class="params">(struct ControlArguments * <span class="keyword">const</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveUDP</span><span class="params">(struct ControlArguments * <span class="keyword">const</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initControlArguments</span><span class="params">(struct ControlArguments * <span class="keyword">const</span> controlArguments)</span></span>&#123;</span><br><span class="line">    controlArguments-&gt;isSend = <span class="literal">false</span>;</span><br><span class="line">    controlArguments-&gt;isReceive = <span class="literal">false</span>;</span><br><span class="line">    controlArguments-&gt;SendCount = <span class="number">1</span>;</span><br><span class="line">    controlArguments-&gt;PacketLength = <span class="number">100</span>;</span><br><span class="line">    controlArguments-&gt;Interval = <span class="number">20</span>;</span><br><span class="line">    controlArguments-&gt;Port = <span class="number">0</span>;</span><br><span class="line">    controlArguments-&gt;Cycles = <span class="number">10</span>;</span><br><span class="line">    controlArguments-&gt;IP[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">charPoint2Int</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> * <span class="built_in">string</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atoi(<span class="built_in">string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> argumentOK = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">ControlArguments</span>  <span class="title">controlArguments</span>;</span></span><br><span class="line">    initControlArguments(&amp;controlArguments);</span><br><span class="line">    <span class="keyword">while</span>((c = getopt_long (argc, argv, short_options, long_options, &amp;index)) != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (c)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Send\n"</span>);</span><br><span class="line">            controlArguments.isSend = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'r'</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Receive\n"</span>);</span><br><span class="line">            controlArguments.isReceive = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">            l_opt_arg = optarg;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Send Count : %s\n"</span>, l_opt_arg);</span><br><span class="line">            controlArguments.SendCount = charPoint2Int(l_opt_arg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'y'</span>:</span><br><span class="line">            l_opt_arg = optarg;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Send Cycles : %s\n"</span>, l_opt_arg);</span><br><span class="line">            controlArguments.Cycles = charPoint2Int(l_opt_arg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'l'</span>:</span><br><span class="line">            l_opt_arg = optarg;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Packet Length : %s\n"</span>,l_opt_arg);</span><br><span class="line">            controlArguments.PacketLength = charPoint2Int(l_opt_arg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'i'</span>:</span><br><span class="line">            l_opt_arg = optarg;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Interval Time : %s\n"</span>,l_opt_arg);</span><br><span class="line">            controlArguments.Interval = charPoint2Int(l_opt_arg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">            printHelp();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'p'</span>:</span><br><span class="line">            l_opt_arg = optarg;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Chosen Port : %s\n"</span>,l_opt_arg);</span><br><span class="line">            controlArguments.Port = charPoint2Int(l_opt_arg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">            l_opt_arg = optarg;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Target IP : %s\n"</span>,l_opt_arg);</span><br><span class="line">            <span class="built_in">strncpy</span>(controlArguments.IP,l_opt_arg,<span class="number">15</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Do not match!!!\n"</span>);</span><br><span class="line">            argumentOK = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(argumentOK)&#123;</span><br><span class="line">        <span class="keyword">if</span>(controlArguments.isSend &amp;&amp; !controlArguments.isReceive)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"choosing send\n"</span>);</span><br><span class="line">            sendUDP(&amp;controlArguments);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(controlArguments.isReceive &amp;&amp; !controlArguments.isSend)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"choosing receive\n"</span>);</span><br><span class="line">            receiveUDP(&amp;controlArguments);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"**************************\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Arguments Error!    both send and receive.\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"************************************************\n"</span>);</span><br><span class="line">        printHelp();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHelp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Help Menu:\n  Argument reference list:\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    -s  :send UDP packets.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    -r  :receive UDP packets.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    -c --count  :packets to send one cycle.default is 1.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    -y --cycles  :send cycles.default is 10.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    -l --length  :data length in udp packet.default is 100bytes.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    -i --interval  :milliseconds between send options.default is 20ms.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    -a --ip  :ip address to operate.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    -p --port  :port used for UDP socket.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    -h --help  :command help.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Check IP Format</span></span><br><span class="line"><span class="comment">if format error return false;</span></span><br><span class="line"><span class="comment">if format check passed return true;</span></span><br><span class="line"><span class="comment">argument is the pointer to the IP string.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IPFormatCheck</span><span class="params">(<span class="keyword">char</span> * <span class="keyword">const</span> IP)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"IP check\n"</span>);</span><br><span class="line">    <span class="keyword">int</span> ip_length = <span class="built_in">strlen</span>(IP);</span><br><span class="line">    <span class="keyword">bool</span> checkError = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> count_s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,interval = <span class="number">0</span> ; i &lt; ip_length ; ++ i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(IP[i] == <span class="string">'.'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(interval == <span class="number">0</span> || interval &gt; <span class="number">3</span>)&#123;</span><br><span class="line">                checkError = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ++ count_s;</span><br><span class="line">                interval = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(IP[i] &gt;= <span class="string">'0'</span> &amp;&amp; IP[i] &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line">            ++ interval;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            checkError = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count_s != <span class="number">3</span>)&#123;</span><br><span class="line">        checkError = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (!checkError);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Check Arguments for send Process</span></span><br><span class="line"><span class="comment">if check passed return true;</span></span><br><span class="line"><span class="comment">if check failed return false;</span></span><br><span class="line"><span class="comment">argument is the pointer to struct ControlArguments.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkSendConfig</span><span class="params">(struct ControlArguments * <span class="keyword">const</span> controlArguments)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"checking arguments.\n"</span>);</span><br><span class="line">    <span class="keyword">bool</span> returnVaule;</span><br><span class="line">    <span class="keyword">char</span> * IP;</span><br><span class="line">    IP = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">strlen</span>(controlArguments-&gt;IP)) + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strncpy</span>(IP,controlArguments-&gt;IP,<span class="number">15</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(IP) != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(IPFormatCheck(IP))&#123;</span><br><span class="line">            <span class="keyword">if</span>((controlArguments-&gt;Port == <span class="number">0</span>) || (controlArguments-&gt;PacketLength == <span class="number">0</span>))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Port:%d  Length:%d\n"</span>,controlArguments-&gt;Port,controlArguments-&gt;PacketLength);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"[Error] : Port or PacketLength Error.\n"</span>);</span><br><span class="line">                returnVaule = <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                returnVaule = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[Error] : IP Error\n"</span>);</span><br><span class="line">            returnVaule = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[Error] : IP length = 0!\n"</span>);</span><br><span class="line">        returnVaule = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(IP);</span><br><span class="line">    <span class="keyword">return</span> returnVaule;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">threadSend</span><span class="params">(struct ControlArguments * <span class="keyword">const</span> controlArguments)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"****************************************\nSending Thread Start\n"</span>);</span><br><span class="line">    <span class="comment">//定义sockfd</span></span><br><span class="line">    <span class="keyword">int</span> sock_cli = socket(AF_INET,SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//定义sockaddr_in</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    servaddr.sin_port = htons(controlArguments-&gt;Port);  <span class="comment">//服务器端口</span></span><br><span class="line">    servaddr.sin_addr.s_addr = inet_addr(controlArguments-&gt;IP);  <span class="comment">//服务器ip</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">time</span>;</span></span><br><span class="line">    <span class="comment">//连接服务器，成功返回0，错误返回-1</span></span><br><span class="line">    <span class="keyword">if</span> (connect(sock_clli, (struct sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr)) != <span class="number">0</span>)&#123;</span><br><span class="line">       perror(<span class="string">"connect"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">char</span> *sendbuf = <span class="built_in">malloc</span>(controlArguments-&gt;PacketLength);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; controlArguments-&gt;PacketLength - <span class="number">1</span> ; i++)&#123;</span><br><span class="line">            gettimeofday(&amp;time,<span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">int</span> seed = time.tv_usec + i;</span><br><span class="line">            sendbuf[i] = rand_r(&amp;seed) % <span class="number">93</span> + <span class="number">33</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sendbuf[controlArguments-&gt;PacketLength - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buf : %s\n"</span>,sendbuf);</span><br><span class="line">        <span class="keyword">useconds_t</span> sleep_us = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)controlArguments-&gt;Interval * <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span> pack_seq = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>  ; i &lt; controlArguments-&gt;Cycles ; ++ i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; controlArguments-&gt;SendCount ; j++)&#123;</span><br><span class="line">                <span class="keyword">char</span> *realSend = <span class="built_in">malloc</span>((<span class="built_in">strlen</span>(sendbuf) + <span class="number">20</span>));</span><br><span class="line">                <span class="keyword">if</span>(realSend)&#123;</span><br><span class="line">                    gettimeofday(&amp;time,<span class="literal">NULL</span>);</span><br><span class="line">                    <span class="built_in">sprintf</span>(realSend,<span class="string">"[%4ld.%06ld][%4d]:%s"</span>,time.tv_sec,time.tv_usec,++pack_seq,sendbuf);</span><br><span class="line">                    <span class="keyword">if</span>(send(sock_cli, realSend, <span class="built_in">strlen</span>(realSend),<span class="number">0</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Send Successful\n"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">free</span>(realSend);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            usleep(sleep_us);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(sendbuf);</span><br><span class="line"><span class="comment">//        printf("free.\n");</span></span><br><span class="line">    &#125;</span><br><span class="line">    close(sock_cli);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Sending Thread Finish\n****************************************\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendUDP</span><span class="params">(struct ControlArguments * <span class="keyword">const</span> controlArguments)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(checkSendConfig(controlArguments))&#123;</span><br><span class="line"><span class="comment">//        pthread_t tid;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Before Send Thread\n"</span>);</span><br><span class="line"><span class="comment">//        pthread_create(&amp;tid, NULL, threadSend(controlArguments), NULL);</span></span><br><span class="line"><span class="comment">//        pthread_tryjoin_np(tid, NULL);</span></span><br><span class="line">        threadSend(controlArguments);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"After Send Thread\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkReceiveConfig</span><span class="params">(struct ControlArguments * <span class="keyword">const</span> controlArguments)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(controlArguments-&gt;Port == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[Error] : Please set Listening port.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">threadReceive</span><span class="params">(struct ControlArguments * <span class="keyword">const</span> controlArguments)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"****************************************\nReceiving Thread Start\n"</span>);</span><br><span class="line">    <span class="comment">//定义sockfd</span></span><br><span class="line">    <span class="keyword">int</span> server_sockfd = socket(AF_INET,SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> recive_serial = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(server_sockfd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//定义sockaddr_in</span></span><br><span class="line">        struct sockaddr_in server_sockaddr;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">        <span class="built_in">memset</span>(&amp;server_sockaddr,<span class="number">0</span>,<span class="keyword">sizeof</span>(struct sockaddr_in));</span><br><span class="line">        server_sockaddr.sin_family = AF_INET;</span><br><span class="line">        server_sockaddr.sin_port = htons(controlArguments-&gt;Port);</span><br><span class="line">        server_sockaddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">        <span class="comment">//bind，成功返回0，出错返回-1</span></span><br><span class="line">        <span class="keyword">if</span>(bind(server_sockfd,(struct sockaddr *)&amp;server_sockaddr,<span class="keyword">sizeof</span>(server_sockaddr))==<span class="number">-1</span>)&#123;</span><br><span class="line">            perror(<span class="string">"bind"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//客户端套接字</span></span><br><span class="line">            <span class="keyword">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">socklen_t</span> length = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">            <span class="keyword">int</span> recv_len = <span class="number">0</span>;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">time</span>;</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//成功返回非负描述字，出错返回-1</span></span><br><span class="line">                recv_len = recvfrom(server_sockfd,buffer,<span class="keyword">sizeof</span>(buffer),<span class="number">0</span>,(struct sockaddr *)&amp;client_addr,&amp;length);</span><br><span class="line">                gettimeofday(&amp;time,<span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span>(recv_len &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    ++ recive_serial;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"[%8ld.%06ld]Get[%d][l:%d] : %s\n"</span>,time.tv_sec,time.tv_usec,recive_serial,recv_len,buffer);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">memset</span>(&amp;buffer,<span class="number">0</span>,<span class="keyword">sizeof</span>(buffer));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(server_sockfd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Receiving Thread Finish\n****************************************\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveUDP</span><span class="params">(struct ControlArguments * <span class="keyword">const</span> controlArguments)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(checkReceiveConfig(controlArguments))&#123;</span><br><span class="line"><span class="comment">//        pthread_t tid;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Before Thread\n"</span>);</span><br><span class="line"><span class="comment">//        pthread_create(&amp;tid, NULL, threadReceive(controlArguments), NULL);</span></span><br><span class="line"><span class="comment">//        pthread_tryjoin_np(tid, NULL);</span></span><br><span class="line">        threadReceive(controlArguments);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"After Thread\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="函数解析"><a href="#函数解析" class="headerlink" title="函数解析"></a>函数解析</h2><h4 id="1-main-int-argc-char-argv"><a href="#1-main-int-argc-char-argv" class="headerlink" title="1.main(int argc, char *argv[])"></a>1.main(int argc, char *argv[])</h4><pre><code>int main(int argc, char *argv[])
</code></pre>
<p>主函数，用于接收参数和命令行解析。采用了getopt.h中提供的参数解析功能。可以像Linux自带的命令工具一样，可以通过短参或长参进行运行时的参数设定。</p>
<p>采用的参数设定方式可以调用短参数－ｈ进行查看。默认的参数设定方式如下：</p>
<pre><code>-s  :send UDP packets.
-r  :receive UDP packets.
-c --count  :packets to send one cycle.default is 1.
-y --cycles  :send cycles.default is 10.
-l --length  :data length in udp packet.default is 100bytes.
-i --interval  :milliseconds between send options.default is 20ms.
-a --ip  :ip address to operate.
-p --port  :port used for UDP socket.
-h --help  :command help.
</code></pre>
<h4 id="2．IPFormatCheck-char-const-IP"><a href="#2．IPFormatCheck-char-const-IP" class="headerlink" title="2．IPFormatCheck(char * const IP)"></a>2．IPFormatCheck(char * const IP)</h4><pre><code>bool　IPFormatCheck(char * const IP)
</code></pre>
<p>IP格式检查函数，传入的参数是输入的IP字符串，返回的是检查结果。如果IP字符串符合IP的书写格式，返回true；如果IP字符串出现错误，返回false。</p>
<p>该检查函数仅面向IPv4，如果输入的地址是IPv6，将返回false。</p>
<h4 id="3．checkSendConfig-struct-ControlArguments-const-controlArguments"><a href="#3．checkSendConfig-struct-ControlArguments-const-controlArguments" class="headerlink" title="3．checkSendConfig(struct ControlArguments * const controlArguments)"></a>3．checkSendConfig(struct ControlArguments * const controlArguments)</h4><pre><code>bool　checkSendConfig(struct ControlArguments * const controlArguments)
</code></pre>
<p>发送参数检查，传入的参数是ControlArguments结构体指针，如果参数完备，返回true；如果参数出现冲突或者错误，返回false。</p>
<p>检查过程中，需要检查设定的IP地址，目标端口地址。如果任何一个参数出现错误，将返回false。</p>
<h4 id="4．checkReceiveConfig-struct-ControlArguments-const-controlArguments"><a href="#4．checkReceiveConfig-struct-ControlArguments-const-controlArguments" class="headerlink" title="4．checkReceiveConfig(struct ControlArguments * const controlArguments)"></a>4．checkReceiveConfig(struct ControlArguments * const controlArguments)</h4><pre><code>bool checkReceiveConfig(struct ControlArguments * const controlArguments)
</code></pre>
<p>监听参数检查，因为监听的是本地端口，所以只要本地端口号不为空即可。</p>
<p>传入的参数是ControlArguments结构体指针，返回值为true或者false。</p>
<h4 id="5．threadSend-struct-ControlArguments-const-controlArguments"><a href="#5．threadSend-struct-ControlArguments-const-controlArguments" class="headerlink" title="5．threadSend(struct ControlArguments * const controlArguments)"></a>5．threadSend(struct ControlArguments * const controlArguments)</h4><pre><code>void threadSend(struct ControlArguments * const controlArguments)
</code></pre>
<p>UDP数据包发送函数，可以作为单独的线程运行。传入的参数为ControlArguments结构体指针，根据设定的发送轮次和间隔、计数进行一次发送过程。</p>
<p>在UDP的数据负载设定中，采用了随机填充的方法，通过随机数到ASCII码的映射，实现定长负载的内容生成。</p>
<h4 id="6．threadReceive-struct-ControlArguments-const-controlArguments"><a href="#6．threadReceive-struct-ControlArguments-const-controlArguments" class="headerlink" title="6．threadReceive(struct ControlArguments * const controlArguments)"></a>6．threadReceive(struct ControlArguments * const controlArguments)</h4><pre><code>void threadReceive(struct ControlArguments * const controlArguments)
</code></pre>
<p>socket处于轮询等待的状态，不断从缓冲区中读取数据包。在接收到数据包后，根据当前的时间添加接收时间戳，用于传输的评估。</p>
<h4 id="7．sendUDP-struct-ControlArguments-const-controlArguments"><a href="#7．sendUDP-struct-ControlArguments-const-controlArguments" class="headerlink" title="7．sendUDP(struct ControlArguments * const controlArguments)"></a>7．sendUDP(struct ControlArguments * const controlArguments)</h4><pre><code>void sendUDP(struct ControlArguments * const controlArguments)
</code></pre>
<p>该函数用于调用threadSend函数，在具备pthread支持的环境中，可以将发送线程作为子线程处理。因为此处不具备多线程优化的意义，所以暂时将相关功能屏蔽。</p>
<h4 id="8．receiveUDP-struct-ControlArguments-const-controlArguments"><a href="#8．receiveUDP-struct-ControlArguments-const-controlArguments" class="headerlink" title="8．receiveUDP(struct ControlArguments * const controlArguments)"></a>8．receiveUDP(struct ControlArguments * const controlArguments)</h4><pre><code>void receiveUDP(struct ControlArguments * const controlArguments)
</code></pre>
<p>该函数用于调用threadReceive函数，代码中设计使用pthread进行子线程处理，因为此处多线程效果有限，相关功能暂时屏蔽。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的MySQLdb操作模式性能分析</title>
    <url>/2017/08/14/2017-08-14-Python-Mysql/</url>
    <content><![CDATA[<h1 id="不同的MySQLdb操作方式性能分析"><a href="#不同的MySQLdb操作方式性能分析" class="headerlink" title="不同的MySQLdb操作方式性能分析"></a>不同的MySQLdb操作方式性能分析</h1><p>要在数据库中插入一条数据，该有哪些操作？</p>
<ol>
<li><strong>连接数据库</strong></li>
<li><strong>获取数据库游标</strong></li>
<li><strong>执行SQL语句</strong></li>
<li><strong>提交</strong></li>
<li><strong>关闭数据库连接</strong></li>
</ol>
<p>然而，在实际的操作中，不可避免涉及到对数据库的多次操作，那么，不同的执行组合到底有什么样的性能表现呢？</p>
<p>在这里，我设定了几种操作方法，并进行了相关的性能测试，用来判断各自的性能差异。</p>
<a id="more"></a>

<h3 id="测试基准"><a href="#测试基准" class="headerlink" title="测试基准"></a>测试基准</h3><p>数据库中创建一个4字段的表，字段属性均为int(32)，对表进行1000000次插入操作。</p>
<p>每次测试完成后，清空表中数据。</p>
<p>采用Python的**time.process_time()**作为性能评价标准</p>
<h3 id="一：数据库保持连接，频繁commit"><a href="#一：数据库保持连接，频繁commit" class="headerlink" title="一：数据库保持连接，频繁commit"></a>一：数据库保持连接，频繁commit</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">form1</span><span class="params">()</span>:</span></span><br><span class="line">    db = MySQLdb.connect(db_url,db_user,db_pass,db_name,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>,<span class="number">1000000</span>):</span><br><span class="line">        sql = <span class="string">"INSERT INTO %s.%s VALUES(%d,%d,%d,%d)"</span> %\</span><br><span class="line">              (db_name,table_name,i,i+<span class="number">1</span>,i<span class="number">-1</span>,i/<span class="number">2</span>)</span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure>

<p>在该种方法中，数据库的连接处于保持状态，每次执行插入语句，都会进行commit操作提交修改。</p>
<h3 id="二：数据库保持连接，最后一次commit"><a href="#二：数据库保持连接，最后一次commit" class="headerlink" title="二：数据库保持连接，最后一次commit"></a>二：数据库保持连接，最后一次commit</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">form2</span><span class="params">()</span>:</span></span><br><span class="line">    db = MySQLdb.connect(db_url,db_user,db_pass,db_name,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>,<span class="number">1000000</span>):</span><br><span class="line">        sql = <span class="string">"INSERT INTO %s.%s VALUES(%d,%d,%d,%d)"</span> %\</span><br><span class="line">              (db_name,table_name,i,i+<span class="number">1</span>,i<span class="number">-1</span>,i/<span class="number">2</span>)</span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">    db.commit()</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure>

<p>该种方法需要保持数据库的连接，但并不是每次执行SQL语句都会进行数据库的提交，而是最后一次提交。</p>
<h3 id="三：在数据库操作前连接，操作完成后关闭"><a href="#三：在数据库操作前连接，操作完成后关闭" class="headerlink" title="三：在数据库操作前连接，操作完成后关闭"></a>三：在数据库操作前连接，操作完成后关闭</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">form3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>,<span class="number">1000000</span>):</span><br><span class="line">        db = MySQLdb.connect(db_url,db_user,db_pass,db_name,charset=<span class="string">'utf8'</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        sql = <span class="string">"INSERT INTO %s.%s VALUES(%d,%d,%d,%d)"</span> %\</span><br><span class="line">              (db_name,table_name,i,i+<span class="number">1</span>,i<span class="number">-1</span>,i/<span class="number">2</span>)</span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        db.close()</span><br></pre></td></tr></table></figure>

<p>该种方法在在每次数据库操作前均需要建立与数据库的连接，但并不会保持下去，而是在对数据库的操作完成后进行连接释放。当下次再进行数据库操作的时候再创建连接。</p>
<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">form1 :  116.677019931</span><br><span class="line">form2 :  82.13445935399999</span><br><span class="line">form3 :  328.88110945000005</span><br></pre></td></tr></table></figure>

<p>理论上分析，每次对数据库操作都需要建立连接，一定是时间消耗最大的；而最后一次全部提交，一定是时间消耗最少的。</p>
<p>从最后的时间统计中，也体现了这一规律。form3这种每次都进行连接建立的方式，耗费的时间达到了form2的4倍。</p>
<p>而form1这种每次数据库操作都进行提交操作的方式，比form2增加了42%的时间。</p>
<p><strong>但是，这三种方法在不同的场景中有不同的应用意义。</strong></p>
<p><strong>对于数据库服务器连接数量有限制的场景中，采用form1和form2既有可能导致部分终端无法连接到数据库。</strong></p>
<p><strong>对于数据操作敏感的场景，form2这种一次提交的方式极有可能导致失败，需要大范围的数据回滚。</strong></p>
<p><strong>所以，各种方法利弊共存，还是要考虑实际情况来操作。</strong></p>
<blockquote>
</blockquote>
<p>以上内容均为本人学习过程中的测试和分析，如果有任何问题，欢迎批评指正。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>2017暑期学校——历史</title>
    <url>/2017/08/23/2017-08-23-About-IRC-VCSS-2017-2/</url>
    <content><![CDATA[<h2 id="海军博物馆"><a href="#海军博物馆" class="headerlink" title="海军博物馆"></a>海军博物馆</h2><p>青岛不仅仅是中国第一艘航母“辽宁”舰的母港，也是09年海上阅兵的举行海域。在栈桥的西边，就是新中国海军白手起家的见证————“海军博物馆”。</p>
<p><a href="https://baike.baidu.com/item/%E6%B5%B7%E5%86%9B%E5%8D%9A%E7%89%A9%E9%A6%86" target="_blank" rel="noopener">海军博物馆</a>的规模和建筑，和军博、国博等国家级博物馆比起来，实在寒酸不少。不过因为海军博物馆是由海军建造维护，资金来源和运营上就不是那么细腻。老式的水上飞机和轰炸机就露天摆放，军舰也是一律用白漆保护，看起来萧瑟不少。</p>
<a id="more"></a>

<p><img src="/images/2017-08-23/c83d70cf3bc79f3dd0505e96b0a1cd11738b29e6.jpg"></p>
<p>不过，新的海军博物馆正在建造中，也许建成以后，也能有军博那样的还原度吧。（不得不说，军博的设备养护真的是非常棒，至少外表上╮(╯▽╰)╭）</p>
<p>进入大门，沿着侧边小道，首先看到的是两枚巨大的螺旋桨。不过明显是展示用的样品，桨尖的空蚀都没有，略微缺少些历史的味道。如果放置从退役的军舰上拆下螺旋桨，将会有更浓重的历史感。</p>
<p><img src="/images/2017-08-23/1e30e924b899a901894736c01d950a7b0308f5d2.jpg"></p>
<h2 id="武器"><a href="#武器" class="headerlink" title="武器"></a>武器</h2><p>海军博物馆现有的馆藏武器主要是三艘军舰、一艘潜艇、一些舰载武器和部分退役飞机。</p>
<h3 id="军舰"><a href="#军舰" class="headerlink" title="军舰"></a>军舰</h3><p><img src="/images/2017-08-23/IMG_20170716_143922_s.jpg"></p>
<p><a href="https://baike.baidu.com/item/101%E9%9E%8D%E5%B1%B1%E5%8F%B7%E9%A9%B1%E9%80%90%E8%88%B0" target="_blank" rel="noopener">鞍山舰</a>，是中国最早的驱逐舰，隶属6607型（鞍山级）。101号鞍山舰是该系首舰，1941年9月4日建成，1954年10月14日在青岛交付中国海军，1969年5月，改装成导弹驱逐舰，1992年4月24日退役。鞍山舰曾参加过第二次世界大战，后据中苏协议，即将退役的鞍山舰被出售给中国，曾经的“四大金刚”首舰。鞍山舰在中国海军的服役时间长达38年，还不包括在苏联海军服役的时间。现在看来，鞍山舰不仅老旧，性能也十分平庸，可在50年代，这是中国海军能够买到的最好军舰了。</p>
<p><img src="/images/2017-08-23/IMG_20170716_145147_s.jpg"></p>
<p><a href="https://baike.baidu.com/item/105%E8%88%B0" target="_blank" rel="noopener">济南舰</a>，051型驱逐舰首舰，是驱逐舰国产化的实验品。从最初的6607型仿制舰，到具备飞行甲板的导弹驱逐舰，再到新武器的实验平台。中国海军的发展是及其不易的，济南舰上的钢板都是修修补补的，各处焊接点也是参差不齐。甚至舰内的电子设备也近乎于0，通讯还要靠喊。而现在的055大驱，052D，054A，056，组成了一个驱逐舰家族，曾经的老舰也真的老了。</p>
<p><img src="/images/2017-08-23/IMG_20170716_145932.jpg"></p>
<p>离开的时候，我还开玩笑说，这个码头上还有几个位置，说不定就是为“辽宁舰”准备的，这又有谁能预料呢？</p>
<h3 id="潜艇"><a href="#潜艇" class="headerlink" title="潜艇"></a>潜艇</h3><p><img src="/images/2017-08-23/29381f30e924b8996fcb1ace6e061d950b7bf655.jpg"></p>
<p>2017年，海军博物馆引进的新“装备”，就包括新中国第一艘核潜艇“长征1号”，是汉级（091型）核潜艇的首舰，编号401。401号核潜艇服役时便被部署在青岛基地，隶属北海舰队，也是她的最后容身之所。从74年服役，到03年退役，这位29年的老兵，支撑了发展中的中国的海权。</p>
<p><img src="/images/2017-08-23/IMG_20170716_145036_s.jpg"></p>
<h3 id="反舰导弹"><a href="#反舰导弹" class="headerlink" title="反舰导弹"></a>反舰导弹</h3><p><img src="/images/2017-08-23/908fa0ec08fa513dfcd30e283d6d55fbb3fbd9cf.jpg"></p>
<p><a href="https://baike.baidu.com/item/%E5%B7%A8%E6%B5%AA-1%E6%BD%9C%E5%B0%84%E5%BC%B9%E9%81%93%E5%AF%BC%E5%BC%B9" target="_blank" rel="noopener">巨浪-1潜射弹道导弹</a>，是中国第一种使用固体燃料的弹道导弹，搭配092型核潜艇，是核三位一体的组成力量。当遭受核攻击时，游弋在大洋深处的核潜艇，可以发射载有核弹头的弹道导弹进行反击。</p>
<p>可惜的是，现在海军博物馆的装备维护实在是太差了，全部露天摆放，还被杂草攀附。希望当其修缮一新的时候，能够像军博那样，给这些前一辈科研人员的心血一个合适的归处。</p>
<h3 id="其他武器"><a href="#其他武器" class="headerlink" title="其他武器"></a>其他武器</h3><p>其他的诸如气垫船、鱼雷艇等转杯还在岸上堆着。甚至于还有一艘木壳鱼雷艇，能够保存到现在也是不可思议。如果仔细观察的话，可以看见一些舰艇的螺旋桨上的空蚀，也许是型号难以匹配，没有进行更换。海航的一些老爷机，比如水上飞机、八爷等，估计也受不了多久青岛海风的侵蚀，早晚会报废掉。</p>
<p><img src="/images/2017-08-23/IMG_20170716_143935_s.jpg"></p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>RTP头字段参数解析</title>
    <url>/2017/08/08/2017-08-08-RTP-Head-Analysis/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>最近在做VoLTE的数据包分析，发现了一些现有的资料中描述的不太清楚的地方，现将我的个人感受整理出来，供大家批评指正。</p>
<p>VoLTE是Voice over Long Term Evolution的缩写，也就是基于LTE网络的语音通信方案。因为VoLTE的架构设计非常的复杂，还涉及到基站间链路交换、IPv6地址的分配等等，此处不再详述。</p>
<p>在我们的测试中，采用Samsung A5108移动定制机作为测试终端，TCPDUMP作为抓包工具。得到的结果在WireShark中进行分析。</p>
<a id="more"></a>

<h2 id="VoLTE包结构"><a href="#VoLTE包结构" class="headerlink" title="VoLTE包结构"></a>VoLTE包结构</h2><p>VoLTE的数据包主要分为以下几类：</p>
<ol>
<li>** 通话控制包 **</li>
<li>** RTCP-传输控制包 **</li>
<li>** RTP数据包 **</li>
</ol>
<h3 id="通话控制包"><a href="#通话控制包" class="headerlink" title="通话控制包"></a>通话控制包</h3><p>在拨号和通话建立时，双方会发出一系列ESP协议包，包中包含了主叫、被叫、IP地址、支持的编码格式等等信息。</p>
<p>不过，需要注意的是，在WireShark中，ESP包的内容是不会解析的。而如果我们需要了解双方的IP、电话号码或者所在基站，则需要换一种方式。</p>
<p>用文本编辑器，比如NotePad++或者Edit Plus。取决于抓包文件的大小。如果是小文件，可以用NotePad++打开，但如果文件过大，就需要用Edit Plus了。Edit Plus的好处，就是具有64位版本，在数据处理能力上略胜一筹。</p>
<p><img src="/images/2017-08-08/capture-volte-head.jpg"></p>
<p>在开始，可以看见邀请消息“INVITE”，以及双方的电话信息、IPv6地址、所属网络等身份信息。</p>
<p><img src="/images/2017-08-08/capture-volte-voice-support.jpg"></p>
<p>在下面的数据中，可以看到不同语音编码方式，这和WireShark分析得到的PT类型是对应的。并且，不同类型的采样频率，是计算RTP时间戳的重要依据。</p>
<h2 id="RTP包结构"><a href="#RTP包结构" class="headerlink" title="RTP包结构"></a>RTP包结构</h2><p>RTP包是通过UDP协议进行传输的，在UDP的负载中，包含着RTP的数据帧。</p>
<p><img src="/images/2017-08-08/capture-rtp-header.jpg"></p>
<pre><code>version (V): 2 bits
  This field identifies the version of RTP.The version defined by
  this specification is two (2).
  RTP的版本号，1和0有其他定义


padding (P): 1 bit
  If the padding bit is set, the packet contains one or more
  additional padding octets at the end which are not part of the
  payload.The last octet of the padding contains a count of how
  many padding octets should be ignored, including itself.
  是否在包的末尾进行填充，如果进行了填充，则其不属于负载的一部分。用于某些特定的加密算法


extension (X): 1 bit
  If the extension bit is set, the fixed header MUST be followed by
  exactly one header extension, with a format defined below.
  
</code></pre>
<p><img src="/images/2017-08-08/capture-rtp-header-extension.jpg"></p>
<pre><code>  RTP头是否进行了拓展，否则必须按照特定的格式进行。


CSRC count (CC): 4 bits
  The CSRC count contains the number of CSRC identifiers that follow
  the fixed header.
  
  
marker (M): 1 bit
  The interpretation of the marker is defined by a profile.  It is
  intended to allow significant events such as frame boundaries to
  be marked in the packet stream.  A profile MAY define additional
  marker bits or specify that there is no marker bit by changing the
  number of bits in the payload type field.
  帧的分隔，接收到带有marker标记的包，意味着一个数据帧的结束。


payload type (PT): 7 bits
  This field identifies the format of the RTP payload and deand ded 
  de dedeeeand ded de dedee by the application.  
  如前文提到的数据编码方式，不同的数据类型在此字段有体现。


sequence number: 16 bits
  The sequence number increments by one for each RTP data packet
  sent, and may be used by the receiver to detect packet loss and to
  restore packet sequence.  The initial valal vall valvalallhe sequence number
  SHOULD be random (unpr to make known-plaintext attacks
  on encryption more difficult, even if the source itself does not
  encrypt according to the method in Section 9.1, because the
  packets may flow through a translator that does. 
  包的序号，每次选用一个随机的数字，防止已知明文攻击。


timestamp: 32 bits
  The timestamp reflects the sampling instant of the first octet in
  the RTP data packet.  The sampling instant MUST be derived from a
  clock that increments monotonically and linearly in time to allow
  synchronization and jitter calculations.
  RTP头中一个非常重要的字段，可以通过时间戳的变化计算还原一帧的采样时间。
  具体的计算方法见下方。
  
SSRC: 32 bits
  The SSRC field identifies the synchronization source.  This
  identifier SHOULD be chosen randomly, with the intent that no two
  synchronization sources within the same RTP session will have the
  same SSRC identifier. 

CSRC list: 0 to 15 items, 32 bits each
  The CSRC list identifies the contributing sources for the payload
  contained in this packet.  The number of identifiers is given by
  the CC field.
  
  
</code></pre>
<h2 id="RTP时间戳计算"><a href="#RTP时间戳计算" class="headerlink" title="RTP时间戳计算"></a>RTP时间戳计算</h2><p>因为RTP在传输的过程中，会对一帧数据进行分包，导致不同的数据包具有相同的TimeStamp。在进行时间还原时，必须跟踪具有不同时间戳的包才具有还原的意义。</p>
<p>正如之前提到的，RTP Header中的marker代表着一个数据帧的结束，也代表着接下来的数据包将会有不同的TimeStamp值。</p>
<p>因为RTP的时间戳增量是按照采样时间递增的，所以必须要知道此次传输的数据帧格式。在RTP包格式中，提到过PT字段。PT字段代表着RTP包所传输的数据类型，在我们的VoLTE视频测试中，得到的PT值是115。</p>
<p>得到PT值之后，需要对照通话控制包中的格式及帧率的对应关系，用来进一步计算。</p>
<p>以我们的测试为例，对于数据包i和j，具有不同的TimeStamp值<em>T<sub>i</sub><em>和</em>T<sub>j</sub><em>。<br>PT类型115对应的时钟频率为</em>f</em> &#x3D; 90000 Hz，视频帧率为<em>fps</em> &#x3D; 30 fps。</p>
<p>那么，真实的数据帧时间间隔是多少呢？</p>
<p><em>ΔT</em> ＝ (<em>T<sub>i</sub></em> - <em>T<sub>j</sub></em>) &#x2F; (<em>f</em> &#x2F; <em>fps</em>) * (1 &#x2F; <em>fps</em>) (s)</p>
<p>时间戳的默认递增长度，是时钟频率&#x2F;帧率，但在我们的测试中，发现其递增规律，并不是严格的3000，而是会在一定范围内浮动。通过数学计算，发现：虽然存在浮动，但仍然存在严格的比例，即TimeStamp的3000对应真实的1&#x2F;30秒。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>VoLTE</tag>
        <tag>RTP</tag>
      </tags>
  </entry>
  <entry>
    <title>2017暑期学校——及时行乐</title>
    <url>/2017/08/23/2017-08-23-About-IRC-VCSS-2017-3/</url>
    <content><![CDATA[<h2 id="海洋"><a href="#海洋" class="headerlink" title="海洋"></a>海洋</h2><p>海洋和人类的关系，难以用一句话说清楚。但对于来自非沿海城市的孩子，大海还是保留着一份神秘。</p>
<p>来到青岛，给人的第一感觉，是潮湿。嘲弄海边吹来的海风，在城市中形成了片片云雾，不管是山还是高楼，仿佛直入天际，产生一种虚幻的感觉。</p>
<p>也许已经好久没来到海边了，从海水浴场到野海滩，等着时间一点点流逝，有种让人难舍难分的感觉。</p>
<p>在青岛奥帆中心，看过千帆林立，感受着从大海吹来的“海鲜味”海风，给人一种错觉：也许，该归隐了。从奥帆中心的海边向东，穿过一个人行步道，便来到了一处原味的海滩。</p>
<p>虽然没有梦幻般的沙滩，只有林立的巨石，却让我们度过了几个愉快的下午。</p>
<a id="more"></a>

<p><img src="/images/2017-08-23/20170823154459.jpg"></p>
<p><img src="/images/2017-08-23/IMG_20170715_144118_s.jpg"></p>
<p>从退潮后的小水洼里，搜寻几只敏捷的螃蟹，在岩缝中，抠出几枚淡菜，在岩壁上偶然捉到几只寄居蟹。孩童般的体验，即使不再年少，也是难以抗拒。</p>
<p><img src="/images/2017-08-23/20170823154446.jpg"></p>
<p><img src="/images/2017-08-23/IMG_20170715_144140.jpg"></p>
<p><img src="/images/2017-08-23/IMG_20170715_195253_s.jpg" alt="临时放在垃圾桶里养着"></p>
<h2 id="海景"><a href="#海景" class="headerlink" title="海景"></a>海景</h2><p>因为此次暑期学校安排在崂山区，离石老人海水浴场不过两公里，步行去石老人是一个非常享受的活动。</p>
<p>石老人海水浴场处于海岸线的凹处，来自海洋的潮湿空气和杨柳在这里汇聚。从我们住的地方，可以经常看见不远处的山头上缭绕的水汽。甚至在降雨的日子，可以看见整座山都被水雾笼罩，或许，始皇帝追求的仙境也不过如此吧。</p>
<p><img src="/images/2017-08-23/PANO_20170711_181000.jpg"></p>
<p><img src="/images/2017-08-23/IMG_20170711_182610_s.jpg"></p>
<p>在奥帆博物馆，看着远处的的高楼，耸入云霄以另一种形态展现出来。实在难以想象，楼顶的那些员工在看向地面时又怎样的感受。</p>
<p><img src="/images/2017-08-23/IMG_20170715_133252_s.jpg"></p>
<p><img src="/images/2017-08-23/IMG_20170715_145420_s.jpg"></p>
<p>看各种样式的帆船出海</p>
<p><img src="/images/2017-08-23/IMG_20170715_150833_s.jpg"></p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2017暑期学校——遇见大牛</title>
    <url>/2017/08/23/2017-08-23-About-IRC-VCSS-2017-4/</url>
    <content><![CDATA[<h2 id="大牛"><a href="#大牛" class="headerlink" title="大牛"></a>大牛</h2><p><a href="https://www.cs.tau.ac.il/~dcor/index.html" target="_blank" rel="noopener">Daniel Cohen-or</a></p>
<p><a href="http://staff.ustc.edu.cn/~lgliu/" target="_blank" rel="noopener">刘利刚</a></p>
<p><a href="http://www.cs.sdu.edu.cn/~baoquan/" target="_blank" rel="noopener">陈宝权</a></p>
<a id="more"></a>

<h2 id="遇见"><a href="#遇见" class="headerlink" title="遇见"></a>遇见</h2><p>陈保权教授作为“可视计算”暑期学校的发起人，在活动之初，便和大家见了面。陈教授虽然已经40多岁，但从精神不输我们这些二十多岁的人。不论是工作的激情，还是对学生的照顾，总是亲力亲为。当活动早已结束，山东大学IRC开始工作时，陈教授还会聆听每位同学的暑期收获，并对接下来的生活进行指导。这和某些对学生不太友好的教授时截然不同的。</p>
<p>陈教授带领的山东大学交叉研究中心，和Daniel教授所在的以色列特拉维夫大学、北京电影学院高精尖影像中心，具有非常深入的合作。在SIGGRAPH等会议上投出的文章中，很多都是几人联合署名。也难怪，像这种高水平的论文，普通的教授一年出两三篇就已经非常不易了，而他们能够达到这种规模的学术成果，离不开几方人员的努力。科学没有国界，和值得信赖的人一起进行科学研究，应该是一种非常幸福的事情吧。</p>
<p>Daniel教授给我们讲的是一种新奇的3维扫描方法，不用传统的光学仪器，而是利用液体填充的方法，进行可浸润物体的三维重建。当我们了解到该论文的主要工作后，真的是暗暗感叹，原来技术和科学还能这么用。当然，实验数据的产生，也离不开深圳研究院同学的帮助。传统的光学扫描方法，对物体表面的还原具有较好的方法，但是如果物体内部具有孔洞，将会影响光线的反射，导致最终产生的模型出现严重的偏差。比如说，希腊帕特农神庙的模型，因为具有很多的柱形结构，在中间围成了一片空腔，光学扫描会受到对侧石柱的影响产生错误。而通过调整浸润角度，还原得到的三维模型，不仅能够还原这种结构，还可以还原内部光线不可达区域的结构，具有非常好的还原效果。</p>
<p><img src="/images/2017-08-23/20170823155817.jpg" alt="托着腮的就是Daniel教授"></p>
<p>刘利刚教授是我们实验室的同学都比较熟悉的，因为曾经是我们老师的老师，所以被我们私下称之为“师爷”。刘利刚教授和陈保权教授的区别是，陈老师看上去是那种精干的的体型，而刘老师一眼看过去有一种非常亲近的感觉。在我们烧烤晚宴的时候，我们和刘老师短暂交谈了一会儿，他对学生完全没有架子，并且对未来充满希望。在几天的报告中，刘老师几乎对每一个讲者都提出了“尖锐”的问题，搞得会场组织者都有点儿不好意思。但刘老师私下又和学者们不断交流，仿佛完全不受之前的影响，这种主动的参与精神十分难得。</p>
<p><img src="/images/2017-08-23/20170823154502.jpg" alt="右二是刘利刚老师，左二是笔者"></p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2017可视计算暑期学校——感触</title>
    <url>/2017/08/23/2017-08-23-About-IRC-VCSS-2017-5/</url>
    <content><![CDATA[<h2 id="2017山东大学“可视计算”暑期学校"><a href="#2017山东大学“可视计算”暑期学校" class="headerlink" title="2017山东大学“可视计算”暑期学校"></a>2017山东大学“可视计算”暑期学校</h2><p>2017年4月，当我还没有决定读研的方向时，在张磊老师的推荐下，报名参加了山东大学交叉研究院的第三届“可视计算”暑期学校。虽然这个暑期学校的目的，主要以吸引即将保研的本科生为主，但毕竟假期也没多少事儿，还可以见识一下学术界、企业界的大牛，何乐而不为呢？</p>
<p>在之前的宣传材料中，我看到了中科大的刘利刚教授，他是我本科班主任的老师，也是当时我们实验室称之为“师爷”的牛人。还有商汤科技的CEO徐立博士，因为之前的一些技术方向上的重叠，我浏览过<a href="https://www.sensetime.com/" target="_blank" rel="noopener">商汤科技</a>的主页，被这家公司的深厚技术底蕴所“震撼”。究竟是一群怎样的计算机行业从业者，才能实现如此繁华的成果！</p>
<p>虽然，最后我没有选择计算机图形学这个方向，但这几天的所见所感，让我觉得本科四年的生活是那么平淡。</p>
<a id="more"></a>

<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol>
<li><p>注册</p>
<p> 因为我错过了正式的注册时间，只赶上了当天的欢迎晚宴，中间的有些事情就不说了。要感谢我的朋友们帮我领会了暑期学校组织者们准备的物品。</p>
<p> 包括：一个带有身份的挂牌，一件由组织方设计的文化T恤，几天的午餐券，一份安排书</p>
<p> <img src="/images/2017-08-23/IMG_20170714_214700_s.jpg"></p>
</li>
<li><p>听报告</p>
<p> 不得不说，不同讲者因为各自的出发点不同，往往会带有偏向性地准备演讲内容。以Paul、Daniel等人为主流的学术交流型，会着重介绍自己最新的研究成果，甚至有些是2017年SIGGRAPH的论文；以刘利刚、徐立等人为主的科普性演讲，对大多数入门者来说可以帮助理清概念，思维接受程度比较高。</p>
<p> 在我的观察中，与会的老师更倾向于进行学术交流，了解一下其他人有什么好的想法，甚至会尖锐的提出一些未解决的问题。而对于学生来说，更喜欢那些浅显易懂的内容，尤其是中文演讲内容。虽然大多数同学的英语水平并不差，但因为演讲者的母语差异，总会带有一些口音，再加上图形学相关的专业名词，比考六级要难得多。</p>
<p> <img src="/images/2017-08-23/IMG_20170714_113812_s.jpg"></p>
<p> <img src="/images/2017-08-23/20170823155817.jpg"></p>
<p> <img src="/images/2017-08-23/IMG_20170713_101200_s.jpg"></p>
<p> <img src="/images/2017-08-23/20170823155829.jpg"></p>
</li>
<li><p>美食</p>
<p> 虽然，会议主办方拒绝为研究生提供住宿，但是提供了海天酒店（体育中心店）的自助午餐，还有一次烧烤晚宴（然而中午吃太多，晚上吃不下了）。多少也是四星级，在菜品的质量上还是可以的，虽然几天都是重复的( ╯□╰ )。</p>
<p> <img src="/images/2017-08-23/20170823155835.jpg"></p>
<p> 当然，靠海吃海，自己出去吃海鲜也是少不了的。但毕竟是休渔期，本地的海鲜近乎为0，价格也偏高，感受一下海滨城市的丰富海鲜供应也就罢了。值得一提的，就是青岛原浆，每个排挡都有一个啤酒桶，放着冷藏过的原浆啤酒。第一次出去吃的时候不知道他们有原浆，傻乎乎地要了扎啤，后来再喝到原浆的时候发现原来啤酒的口感也可以有这么大的差距。。。</p>
<p> <img src="/images/2017-08-23/IMG_20170715_175245_s.jpg"></p>
</li>
</ol>
<h2 id="感触"><a href="#感触" class="headerlink" title="感触"></a>感触</h2><p>在知乎上随手搜了一下山东大学的“可视计算”，发现回答者都在感叹陈保权老师的能量，可以号召这么多的学术界和工业界大佬，来青岛参加这次活动。我想这和陈老师自身就是业界大佬密不可分，如果这个活动不是山东大学的陈老师举办，而是山东理工大学的A老师（对不起，我乱写的）举办，可能只能请到国内的一些牛人罢了。这种精英的抱团，迸发出的能量远超更多普通人所能。</p>
<p><img src="/images/2017-08-23/20170823155810.jpg"></p>
<p>大学必有大师，也要有包容精神。在现在信息化时代的尾巴，计算机所能做的，不能仅仅局限于方寸的机箱之中。和其他学科结合、和其他技术结合，产生更大的能量。比如刘利刚老师的3D打印和计算机图形学的结合，Daniel的三维重建和机械的结合，产生了非常好的结果。我们应该感受到这一点，计算机已经深深的改变了现代的人类生活，并将更加深刻地影响着未来。理论与技术、科研与工程的结合，才能体现计算机的魅力！</p>
<p><img src="/images/2017-08-23/IMG_20170711_091852_s.jpg"></p>
<p>此外，总有人觉得互联网、人工智能是泡沫，总有一天会因为投资人的退出而没落。但如果计算机和传统行业结合起来，深刻改变着我们的生产、生活方式，将没有人会质疑计算机的作用。信息时代、数据时代、人工智能时代，总归是要服务人的，如果像空中楼阁一样飘渺不可捉摸，被大家抛弃也是必然。</p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL Error2003(111) 问题解决</title>
    <url>/2017/08/24/2017-08-24-A-MySQL-Connect-Error/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>MySQL服务器运行在内网的一台独立机器上，在其他机器上进行MySQLdb连接的时候出现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_mysql_exceptions.OperationalError: (2003, &quot;Can&apos;t connect to MySQL server on &apos;10.108.xxx.xxx&apos; (111)&quot;)</span><br></pre></td></tr></table></figure>

<p>连接方式为Python3 的 MySQLdb包</p>
<p>MySQL版本： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5.7.19-0ubuntu0.16.04.1</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><p>首先考虑到MySQL服务器没有进行网关的配置，怀疑是网关拦截了连接。</p>
<p>在网关关闭后，发现还是抛出这个错误，开始Google该问题代码。</p>
<p>经确认，是MySQL服务默认监听地址有问题。在默认配置下，MySQL会监听127.0.0.1本地IP，如果外部主机尝试进行连接则不被处理</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>修改MySQL服务器的配置文件，注释掉监听IP配置</p>
<p>配置文件路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>

<p><code>[mysqld]</code> 组中，有一条配置 <code>bind-address = 127.0.0.1</code></p>
<p>将该条注释掉，然后重启MySQL服务，即可正常连接</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows添加网络打印机脚本</title>
    <url>/2017/09/11/2017-09-11-Windows%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%BB%9C%E6%89%93%E5%8D%B0%E6%9C%BA%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="Windows下通过脚本添加网络打印机"><a href="#Windows下通过脚本添加网络打印机" class="headerlink" title="Windows下通过脚本添加网络打印机"></a>Windows下通过脚本添加网络打印机</h1><p>最近在内网搭了一台打印服务器，需要给实验室的同学共享，但是添加打印机的操作太繁琐，所以编写了一个添加打印机的脚本，可以代替人工操作过程。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo 添加网络打印机</span><br><span class="line">echo 等待....</span><br><span class="line">net use \\&#123;IP&#125;\IPC$ &quot;&#123;密码&#125;&quot; /user:&quot;&#123;用户名&#125;&quot;</span><br><span class="line">rundll32 printui.dll,PrintUIEntry /in /u /z /q /n &quot;\\&#123;IP&#125;\&#123;打印机名&#125;&quot;</span><br><span class="line">rundll32 printui.dll,PrintUIEntry /y /n &quot;\\&#123;IP&#125;\&#123;打印机名&#125;&quot;</span><br><span class="line">echo 打印机添加成功</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<ol>
<li>{IP}替换为打印机的IP</li>
<li>{密码}替换为打印服务器的用户密码</li>
<li>{用户名}替换为打印服务器的用户名</li>
<li>{打印机名}替换为打印机的名称，可以在打印服务器中进行设置</li>
</ol>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>打印机</tag>
      </tags>
  </entry>
  <entry>
    <title>VoIP丢包模型与分析</title>
    <url>/2017/08/30/2017-08-30-VoIP-TroubleShouter-burst-loss/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文根据<a href="http://www.voiptroubleshooter.com/indepth/burstloss.html" target="_blank" rel="noopener">VoIP Troubleshooter|Indepth: Packet Loss Burstiness</a>总结，文章中的数据和结论非本人原创。</p>
<h2 id="VoIP丢包"><a href="#VoIP丢包" class="headerlink" title="VoIP丢包"></a>VoIP丢包</h2><p>IP的丢包以突发性丢包为主，但是对于常见的几种丢包模型，存在一些不同层次的误解。本文描述了几种常见的丢包模型，并分析了其拟合度。</p>
<a id="more"></a>

<h3 id="伯努利模型-独立模型"><a href="#伯努利模型-独立模型" class="headerlink" title="伯努利模型(独立模型)"></a>伯努利模型(独立模型)</h3><p>简单的独立丢包模型，是最常用的一种。在这种模型中，每一个数据包（或比特错误）的发生，都有着固定的概率Pe。对于一个很大规模的数据包数量N，预期的丢包数量是N*Pe，丢包率Pe &#x3D; 丢包数量&#x2F;总的传输包数。</p>
<h3 id="Gilbert和Gilbert-Elliott模型"><a href="#Gilbert和Gilbert-Elliott模型" class="headerlink" title="Gilbert和Gilbert-Elliott模型"></a>Gilbert和Gilbert-Elliott模型</h3><p>最著名的突发丢包模型的是Gilbert模型，及其变种Gilbert-Elliott模型。这两种都是二态模型，从好到坏或者从0到1的的转换，分别是P01或者P11.</p>
<ol>
<li>Gilbert模型<ol>
<li>状态0是一个0丢失&#x2F;错误</li>
<li>状态1是一个具有独立丢包率Pe1的有损状态</li>
</ol>
</li>
<li>Gilbert-Elliott模型<ol>
<li>状态0是一个具有独立丢包概率Pe0的低丢包状态</li>
<li>状态1是一个具有独立丢包概率Pe1的有损状态</li>
</ol>
</li>
</ol>
<p>一般情况下，Gilbert模型中的有损状态对应一个“丢包”状态。例如，状态1中的丢包率是1，确是不正确的。（在2态Markov模型中这样描述更为合适）这就导致了在分析丢包突发性时，仅仅停留在连串的丢包，忽略了长时间高丢包密度的影响。然而，这些长时间的高丢包密度，可以显著地影响VoIP服务。</p>
<p>例如，考虑如下的丢包模式 000001100101010110110000000000000000000</p>
<ul>
<li>正确的Gilbert模型：突发长度 15，突发密度 60%</li>
<li>错误的Gilbert模型：意味着突发长度 1.5bits</li>
</ul>
<h3 id="Markov模型"><a href="#Markov模型" class="headerlink" title="Markov模型"></a>Markov模型</h3><p>马可夫模型是一种通用的多状态模型，在这种模型中，状态i和j的转换存在着概率p(i, j)。一个2状态的马可夫模型具有一些优势，它可以捕获短期内丢包间的依赖，例如丢包序列[1,4,15,19]。这些通常是非常短的事件（1到3个包长度），但是偶然的链式失败，可以导致长达几十秒的长丢包序列。通过结合2态模型与Gilbert-Elliott模型，可以捕获包括短期连续时间和长期低密度时间。</p>
<p><img src="/images/2017-08-30/markov-model.jpg" alt="马可夫模型"></p>
<p>这种4状态马可夫模型，[7,12]代表爆发期和间隙期。在爆发期中，数据包的接受和丢失，都根据初试的2状态模型。在间隙期中，数据包的接受和丢失，都根据第二个2状态模型。</p>
<p>这些状态有如下定义：</p>
<ol>
<li>状态1：数据包成功接受</li>
<li>状态2：数据包在一段时间之后接受</li>
<li>状态3：数据包在一段时间后丢失</li>
<li>状态4：孤立的数据包在在一段时期后丢失</li>
</ol>
<p>例如，采用上面的丢包模式：</p>
<ul>
<li>丢包模式：000001100101010110110000000000000000000000001000000000</li>
<li>状态：    111113322323232332331111111111111111111111114111111111</li>
</ul>
<p>将间隙状态的定义和一些标准联系起来，是常用的方法。比如，丢包率低于一些限定，或者连续接受数据包的数量。一个突发事件，一定是一个起于丢包、结束于丢包且中间接受的数据包个数达不到阈值的最长序列,一个非常方便的定义。（对于VoIP来说，这个阈值设定为16是合适的；如果是视频的话，64或者128是合适的取值）</p>
<h2 id="跟踪分析"><a href="#跟踪分析" class="headerlink" title="跟踪分析"></a>跟踪分析</h2><h3 id="跟踪描述"><a href="#跟踪描述" class="headerlink" title="跟踪描述"></a>跟踪描述</h3><p>下面的跟踪结果，是哥伦比亚大学、马萨诸塞大学、印度理工学院的研究人员获得的300万个包中的一部分。这些数据通过美国、欧洲、亚洲的不同网站之间进行10ms或30ms间隔的UDP或RTP交流的追踪结果。多数的追踪包含单路延迟和数据包丢失，不过有一部分只有数据包丢失。</p>
<p><img src="/images/2017-08-30/trace_example.jpg" alt="典型的追踪结果"></p>
<h3 id="跟踪分析-1"><a href="#跟踪分析-1" class="headerlink" title="跟踪分析"></a>跟踪分析</h3><p>有些跟踪，是用上面提到的4状态Markov模型分析的，与此同时，结果解释为一个Gilbert-Elliott模型。这就给出了爆发期和间隙期的长度和丢包密度的定义，爆发期的丢包密度要比间隙期的丢包密度大。</p>
<h3 id="追踪1"><a href="#追踪1" class="headerlink" title="追踪1"></a>追踪1</h3><p>关于W1的追踪有两个表，第一个表显示的是突发长度与突发权重的散点图。显而易见，超过300个数据包的的突发性事件是存在的，并且典型的损耗密度是25%。并且，在45°对角线上有一些孤立的点，对应着一些由连接失败导致的长段突发性丢包概率。</p>
<p><img src="/images/2017-08-30/trace_w1_dist.jpg"></p>
<p>Figure 3. Trace W1 Scatter diagram of Burst Length vs Weight for packet loss only</p>
<p>第二个图表，显示的是突发长度和突发权重的散点图，但是引入了30ms的抖动缓冲大小。这和图3的单一丢包图分布相近，说明抖动并不是在这个追踪过程中一个非常重要的因素。</p>
<p><img src="/images/2017-08-30/trace_w1_lossdisc.jpg"></p>
<p>Figure 4. Trace W1 Scatter diagram of Burst Length vs Weight for combined packet loss and packet discard (30mS jitter buffer)</p>
<h3 id="追踪3"><a href="#追踪3" class="headerlink" title="追踪3"></a>追踪3</h3><p>和追踪3相关的图表有2个，第一张图显示的是Gilbert模型下，突发长度和突发权重的散点图。在图中可以清晰地看见超过100长度的突发也发生了，并且具有典型的20-25%的丢包密度。</p>
<p><img src="/images/2017-08-30/trace_w3_loss.jpg"></p>
<p>Figure 4. Trace W3 Scatter diagram of Burst Length vs Weight for packet loss only</p>
<p>第二张表，显示的是在50ms的抖动缓冲下，突发长度和突发权重的散点图。这幅图表明，抖动是追踪中的一个非常显著的问题。突发密度达到500个数据包时，也就意味着突发密度接近30%</p>
<p><img src="/images/2017-08-30/trace_w3_lossdisc.jpg"></p>
<p>Figure 5. Trace W3 Scatter diagram of Burst Length vs Weight for packet loss and packet discard (50mS jitter buffer)</p>
<h2 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h2><p>突发性丢包，对VoIP的通话质量有非常大的影响。即使平均丢包率很小，短时间内的大量丢包也会导致通话质量的下降</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章对数据包丢失分布进行了深入的介绍，并显示出数据包丢失和数据包丢弃是自然的突发事件。并且，突发性丢包是稀疏分布而不是集中分布的。典型的突发丢包具有20-30%的丢包密度，时间长达几秒，而连续丢包可能会在极小概率的状态下发生。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>VoIP</tag>
        <tag>丢包模型</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3 二进制字符串与int转换</title>
    <url>/2017/09/12/2017-09-12-Python3-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8Eint%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="Python3中，二进制字符串与int的转换"><a href="#Python3中，二进制字符串与int的转换" class="headerlink" title="Python3中，二进制字符串与int的转换"></a>Python3中，二进制字符串与int的转换</h1><p>最近的实验中需要用到int转二进制字符串，以及二进制字符串转int的操作，现整理出来，供后续查阅</p>
<a id="more"></a>

<h2 id="int转二进制字符串"><a href="#int转二进制字符串" class="headerlink" title="int转二进制字符串"></a>int转二进制字符串</h2><p>int转二进制字符串，是最简单的，同时也是形式变化比较多的</p>
<h3 id="带进制标识0b的转换"><a href="#带进制标识0b的转换" class="headerlink" title="带进制标识0b的转换"></a>带进制标识0b的转换</h3><ol>
<li>bin()函数 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bin(3)</span><br><span class="line">&apos;0b11&apos;</span><br><span class="line">&gt;&gt;&gt; bin(-10)</span><br><span class="line">&apos;-0b1010&apos;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>如果需要转换为其他进制，需要使用函数hex()或oct()</p>
<ol start="2">
<li>format()函数 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; format(14, &apos;#b&apos;)</span><br><span class="line">&apos;0b1110&apos;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>如果需要转换为其他进制，只需要将’b’替换为’x’（16进制）或’o’（8进制）</p>
<h3 id="不带进制表示的转换"><a href="#不带进制表示的转换" class="headerlink" title="不带进制表示的转换"></a>不带进制表示的转换</h3><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; format(14, &apos;b&apos;)</span><br><span class="line">&apos;1110&apos;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>如果需要转换为其他进制，只需要将’b’替换为’x’（16进制）或’o’（8进制）</p>
<h2 id="二进制字符串转int"><a href="#二进制字符串转int" class="headerlink" title="二进制字符串转int"></a>二进制字符串转int</h2><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; int(&quot;1110&quot;,2)</span><br><span class="line">14</span><br></pre></td></tr></table></figure>
</code></pre>
<p>如果需要转换为其他进制，只需要将’2’替换为其他数值单位</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>读研第一周-感触</title>
    <url>/2017/09/20/2017-09-20-%E8%AF%BB%E7%A0%94%E7%AC%AC%E4%B8%80%E5%91%A8-%E6%84%9F%E8%A7%A6/</url>
    <content><![CDATA[<p>2017年，从北京理工大学毕业，2017年，在北京理工大学入学，一段新的开始。</p>
<a id="more"></a>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>2017年6月30日晚上，也是这所学校通知我们的离开时间，趁着离开前的一个多小时，走了一遍曾经走过的地方。</p>
<p><img src="/images/2017-06-30/20170630_night_before_leaving.jpg" alt="13#楼"></p>
<p>看着曾经生活过的13#606房间的灯不再亮起，和师兄谈论曾经考研奋斗过的地方，去图书馆看看曾经的精神居所。</p>
<p>一切都不会重来</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>2017年9月18日，硕士生涯的第一堂课，见到了曾经的兄弟，见到了曾经的老师。</p>
<p>可是，已经不是熟悉的教室，已经不是熟悉的人群。</p>
<p>但却没有了本科期间那种逍遥的感觉，手头上的数据还没处理完，论文还没开始写，压力一直都在。</p>
<p>曾经一节课晃晃悠悠便过去，如今强迫自己认真听课，每天的上课都是一个繁重的劳动。</p>
<p>希望过着自由的探索生涯，却发现不得不回到熟悉的听课-作业-复习-考试死循环。</p>
<p>我甚至有些理解去年这时候想不开的那个师兄，如果周围没有实验室同学的陪伴，如果没有熟悉的人一起上课，尤其是跳到北京理工大学这个曾经高不可及的平台，失落与孤单，将会彻底的摧毁一个人。</p>
<p>好在我还熟悉这个校园，好在我还有很多挚友，生活还是充满希望。</p>
<p>新的阶段，虽然难了点儿，加油！！！</p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>910实验室服务器搭建记录</title>
    <url>/2017/12/16/2017-12-16-910%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>近期实验室的服务器进行升级优化，在此记录安装过程，作为备忘。</p>
<h1 id="硬盘配置"><a href="#硬盘配置" class="headerlink" title="硬盘配置"></a>硬盘配置</h1><h2 id="硬盘资源"><a href="#硬盘资源" class="headerlink" title="硬盘资源"></a>硬盘资源</h2><p>现有硬盘资源情况如下，包含SSD及HDD复合资源。</p>
<ul>
<li>4TB HDD SATA 2块</li>
<li>240GB SSD SATA 5块</li>
<li>240GB SSD M.2 1块</li>
</ul>
<a id="more"></a>

<h2 id="硬盘设置计划"><a href="#硬盘设置计划" class="headerlink" title="硬盘设置计划"></a>硬盘设置计划</h2><p>根据现有资源，主要划分为三部分：第一部分，系统空间，作为宿主机文件存储及其他虚拟机空间；第二部分，用户主目录，挂载为用户的&#x2F;home目录；第三部分，执行空间，作为当下任务的执行空间。</p>
<ol>
<li>240GB M.2 SSD x1 + 240GB SATA SSD x3 &#x3D; 861GB 可用空间，作为服务器系统空间</li>
<li>240GB SATA SSD x2 RAID0 &#x3D; 480GB 可用空间，作为当前任务的执行空间，挂载到用户目录下</li>
<li>4TB SATA HDD x2 RAID1 &#x3D; 4TB可用空间，作为用户目录的挂载空间，用户目录直接分离出来</li>
</ol>
]]></content>
      <categories>
        <category>log</category>
      </categories>
      <tags>
        <tag>实验室服务器搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>910实验室服务器搭建-LXC虚拟化</title>
    <url>/2017/12/16/2017-12-16-910%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA-LXC%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
    <content><![CDATA[<p>根据实验室的任务需要，该服务器需要同时运行多种任务，且任务间的干扰大。<br>为了能够将不同开发人员的环境区分开，我们在经过多种尝试后，决定采用LXC容器进行虚拟化。</p>
<h2 id="虚拟化需求"><a href="#虚拟化需求" class="headerlink" title="虚拟化需求"></a>虚拟化需求</h2><ol>
<li>各容器应当具有独立IP</li>
<li>容器内具备运行CUDA环境的能力</li>
<li>性能损耗小</li>
<li>管理方便</li>
</ol>
<a id="more"></a>

<h2 id="LXC思路"><a href="#LXC思路" class="headerlink" title="LXC思路"></a>LXC思路</h2><p>因为现有的服务器资源比较充裕，所以给用户空间和编译执行空间设定了不同的RAID卷，用户空间单独提出进行挂载，这样，每个用户的数据都能安全保存。<br>每个用户对应独立IP的容器，容器内具有root权限，可以执行任意的操作。</p>
<p>通过LVM对根目录扩充，容许用户在容器中进行大磁盘占用的操作。独立的RAID0 SSD，支持用户将当前的执行任务放入其中，进行当前运行。独立的RAID1 HDD，支持用户存储用户目录内容，且数据安全有保证。</p>
<h2 id="LXC容器创建"><a href="#LXC容器创建" class="headerlink" title="LXC容器创建"></a>LXC容器创建</h2><h3 id="创建模板容器"><a href="#创建模板容器" class="headerlink" title="创建模板容器"></a>创建模板容器</h3><p>首先创建一个模板容器，并将网络、ssh-server等内容配置好，之后给用户配置的容器都基于该模板容器进行复制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lxc-copy -n old_name -N new_name -K</span><br></pre></td></tr></table></figure>

<p>old_name 是模板容器名，new_name 是目标容器名,-K表示保存之前的配置。</p>
<h3 id="修改容器内的特定信息"><a href="#修改容器内的特定信息" class="headerlink" title="修改容器内的特定信息"></a>修改容器内的特定信息</h3><p>进入到复制得到的容器rootfs，更改容器内的&#x2F;etc&#x2F;hostname，将其更改为需要的名称，否则会显示模板的主机名。</p>
<p>修改容器的配置文件config，将文件夹的挂载配置修改为对应的目录。</p>
<p>由宿主机的lxc-attach，进入容器中，创建用户，并赋予sudo权限，用户名与挂载的目录一致。</p>
<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>最终实现的效果，是用户可以通过独立IP登陆到容器中，并且可以使用挂载的设备与目录。</p>
<p>用户可以自行配置UI，通过vncserver进行访问；也可以创建ftp服务器，直接进行文件传输。</p>
<p>从实际使用效果来看，创建的各个容器就像虚拟机一样，有自己独立的空间，也有独立的IP可以直接访问。</p>
<p>因为创建的容器运行在用户态，在容器中即使以root身份执行，对应于实际机器中的进程ID也不是真正的root。</p>
<p>容器相对于虚拟机来说，资源占用小得多，并且可以根据实际需要进行释放，大大缓解宿主机的压力。</p>
]]></content>
      <categories>
        <category>log</category>
      </categories>
      <tags>
        <tag>实验室服务器搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>910实验室服务器搭建-LXC独立IP配置</title>
    <url>/2017/12/17/2017-12-17-910%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA-LXC%E7%8B%AC%E7%AB%8BIP%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>LXC容器的默认IP，是通过网桥”lxcbr0”分配的10.0.3.XXX的局域网IP，除了host主机外，其他用户无法访问。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>可以通过端口映射，或者更换网桥的方法，将容器和host置于同一个网段，使得外部用户也可以登入容器内部。</p>
<p>因为我们涉及的用户比较多，采用端口映射的方法不仅麻烦，还给使用人员带来不便。</p>
<a id="more"></a>

<h1 id="独立IP设置"><a href="#独立IP设置" class="headerlink" title="独立IP设置"></a>独立IP设置</h1><h2 id="添加网桥"><a href="#添加网桥" class="headerlink" title="添加网桥"></a>添加网桥</h2><p>通过ifconfig，查看当前的网络信息，不同的环境有不同的命名，但一般有一个外网接口enXX、一个本地回环l0、一个LXC容器的默认网桥lxcbr0。</p>
<p>我们需要实现的，是创建一个网桥，使得LXC容器能够分享本机网卡。</p>
<p>修改”&#x2F;etc&#x2F;networking&#x2F;interfaces”<br>添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto br0</span><br><span class="line">iface br0 inet dhcp</span><br><span class="line">	bridge-ifaces XXX</span><br><span class="line">	bridge-ports XXX</span><br><span class="line">	up ifconfig XXX up</span><br><span class="line"></span><br><span class="line">iface XXX inet manual</span><br></pre></td></tr></table></figure>

<p>其中”XXX”即为原有的网络接口名称。</p>
<p>修改完毕后，重启系统。</p>
<p>如果没有问题的话，可以再次通过ifconfig查看当前的网络状况，网桥br0应该配好了。</p>
<h2 id="修改LXC配置文件"><a href="#修改LXC配置文件" class="headerlink" title="修改LXC配置文件"></a>修改LXC配置文件</h2><p>修改”&#x2F;etc&#x2F;lxcf&#x2F;default.conf”，以及现有容器的配置文件。</p>
<p>将原有的项目修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lxc.network.link = br0</span><br></pre></td></tr></table></figure>

<p>其中”br0”即为上一步创建的网桥名称，如果命名为其他，此处也应该对应修改。</p>
<h2 id="检查结果"><a href="#检查结果" class="headerlink" title="检查结果"></a>检查结果</h2><p>以上操作完成后，在容器内查看到的IP地址，应该就是和主机同网段的IP。这样，宿主机所在网络的其他用户，也可以访问容器了。</p>
]]></content>
      <categories>
        <category>log</category>
      </categories>
      <tags>
        <tag>实验室服务器搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>910实验室服务器RAID搭建</title>
    <url>/2017/12/16/2017-12-16-910%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8RAID%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="实验室服务器RAID卷创建记录"><a href="#实验室服务器RAID卷创建记录" class="headerlink" title="实验室服务器RAID卷创建记录"></a>实验室服务器RAID卷创建记录</h1><h2 id="创建SSD-RAID0"><a href="#创建SSD-RAID0" class="headerlink" title="创建SSD RAID0"></a>创建SSD RAID0</h2><p>待创建的SSD 为sde与sdf<br>使用mdadm工具创建卷</p>
<a id="more"></a>

<h3 id="查看待加入的磁盘挂载情况"><a href="#查看待加入的磁盘挂载情况" class="headerlink" title="查看待加入的磁盘挂载情况"></a>查看待加入的磁盘挂载情况</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsblk -o NAME,SIZE,FSTYPE,TYPE,MOUNTPOINT</span><br></pre></td></tr></table></figure>

<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mdadm --create --verbose /dev/md0 --level=0 --raid-devices=2 /dev/sde /dev/sdf</span><br></pre></td></tr></table></figure>

<p>创建后将清空原有的磁盘分区表，根据提示输入y，即可完成。</p>
<h3 id="查看创建结果"><a href="#查看创建结果" class="headerlink" title="查看创建结果"></a>查看创建结果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /proc/mdstat</span><br></pre></td></tr></table></figure>

<p>根据输出的情况查看RAID版本，以及加入的磁盘是否正确。</p>
<h3 id="创建并安装文件系统"><a href="#创建并安装文件系统" class="headerlink" title="创建并安装文件系统"></a>创建并安装文件系统</h3><p>1. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4 -F /dev/md0</span><br></pre></td></tr></table></figure>

<p>根据创建的RAID卷号，修改md后的序号，即可在卷上创建ext4文件系统</p>
<p>2. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /mnt/SSD</span><br></pre></td></tr></table></figure>

<p>创建挂载点</p>
<p>3. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/md0 /mnt/SSD</span><br></pre></td></tr></table></figure>

<p>挂载创建好的卷</p>
<h3 id="配置自启动"><a href="#配置自启动" class="headerlink" title="配置自启动"></a>配置自启动</h3><p>1. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### sudo mdadm --detail --scan | sudo tee -a /etc/mdadm/mdadm.conf</span><br></pre></td></tr></table></figure>

<p>保存生成的磁盘阵列</p>
<h3 id="此命令执行一次就好，否则会在-x2F-etc-x2F-mdadm-x2F-mdadm-conf出现重复项"><a href="#此命令执行一次就好，否则会在-x2F-etc-x2F-mdadm-x2F-mdadm-conf出现重复项" class="headerlink" title="此命令执行一次就好，否则会在&#x2F;etc&#x2F;mdadm&#x2F;mdadm.conf出现重复项"></a>此命令执行一次就好，否则会在&#x2F;etc&#x2F;mdadm&#x2F;mdadm.conf出现重复项</h3><p>2. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>

<p>更新initramfs或初始RAM文件系统，以便阵列在早期引导过程中可用</p>
<p>3. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &apos;/dev/md0 /mnt/SSD ext4 defaults,nofail,discard 0 0&apos; | sudo tee -a /etc/fstab</span><br></pre></td></tr></table></figure>

<p>添加开机挂载选项</p>
<p>针对SSD的RAID0创建完毕</p>
<h2 id="创建HDD的RAID1"><a href="#创建HDD的RAID1" class="headerlink" title="创建HDD的RAID1"></a>创建HDD的RAID1</h2><p>待创建的HDD为sdg和sdh<br>使用mdam创建冗余阵列</p>
<h3 id="创建RAID阵列"><a href="#创建RAID阵列" class="headerlink" title="创建RAID阵列"></a>创建RAID阵列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mdadm --create --verbose /dev/md1 --level=1 --raid-devices=2 /dev/sdg /dev/sdh</span><br></pre></td></tr></table></figure>

<p>创建的结果添加到 &#x2F;dev&#x2F;md1</p>
<p>**创建结束后，一定要通过命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /proc/mdstat</span><br></pre></td></tr></table></figure>

<p>查看当前的进展，当同步进度为100%时，才可进行后续操作！！！！**</p>
<h3 id="创建文件系统并挂载"><a href="#创建文件系统并挂载" class="headerlink" title="创建文件系统并挂载"></a>创建文件系统并挂载</h3><p>1. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4 -F /dev/md1</span><br></pre></td></tr></table></figure>

<p>在RAID上创建文件系统</p>
<p>2. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /mnt/HDD</span><br></pre></td></tr></table></figure>

<p>创建挂载点，命名为HDD</p>
<p>3. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/m1 /mnt/HDD</span><br></pre></td></tr></table></figure>

<p>挂载到挂载点</p>
<p>4. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mdadm --detail --scan | sudo tee -a /etc/mdadm/mdadm.conf</span><br></pre></td></tr></table></figure>

<p>保存RAID布局</p>
<p>5. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>

<p>更新initramfs或初始RAM文件系统，以便阵列在早期引导过程中可用</p>
<p>6. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &apos;/dev/md1 /mnt/HDD ext4 defaults,nofail,discard 0 0&apos; | sudo tee -a /etc/fstab</span><br></pre></td></tr></table></figure>

<p>更新fstab，开机自动挂载</p>
<h1 id="所有过程执行完毕"><a href="#所有过程执行完毕" class="headerlink" title="所有过程执行完毕"></a>所有过程执行完毕</h1>]]></content>
      <categories>
        <category>log</category>
      </categories>
      <tags>
        <tag>实验室服务器搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>910实验室服务器配置-非特权LXC容器</title>
    <url>/2017/12/17/2017-12-17-910%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE-%E9%9D%9E%E7%89%B9%E6%9D%83LXC%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="创建非特权LXC容器"><a href="#创建非特权LXC容器" class="headerlink" title="创建非特权LXC容器"></a>创建非特权LXC容器</h1><p>对于特权容器来说，虽然创建过程比较方便，但存在进程权限的问题，隐形容器的安全性。<br>为了确保服务器用户的误操作不会导致服务器崩溃，经过实验，决定使用非特权容器来进行隔离。</p>
<h2 id="非特权LXC"><a href="#非特权LXC" class="headerlink" title="非特权LXC"></a>非特权LXC</h2><p>对于非特权的LXC容器来说，容器中实际执行的0号用户ID，并不对应服务器的0号用户ID，从而确保服务器上的内容不会出现问题。</p>
<p>LXC采用uid映射的方法，将容器中的UID映射到非特权服务器用户的UID空间。</p>
<p>因为服务器需要挂载一些设备，而只有服务器真实的特权用户可以对设备进行操作，容器内的用户是无法完成这一操作的。</p>
<a id="more"></a>

<h2 id="检查现有的UID-x2F-GID映射表"><a href="#检查现有的UID-x2F-GID映射表" class="headerlink" title="检查现有的UID&#x2F;GID映射表"></a>检查现有的UID&#x2F;GID映射表</h2><p>通过检查 &#x2F;etc&#x2F;subuid 及 &#x2F;etc&#x2F;subgid ，得到映射范围。</p>
<p>默认的映射规则为，对于第一个用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uid:100000:65536</span><br><span class="line">gid:100000:65536</span><br></pre></td></tr></table></figure>

<h2 id="设定网卡上限"><a href="#设定网卡上限" class="headerlink" title="设定网卡上限"></a>设定网卡上限</h2><p>设置LXC的配置文件 &#x2F;etc&#x2F;lxc&#x2F;lxc-usernet</p>
<p>添加类似于”user_name veth lxcbr0 XX”</p>
<p>的记录，即可将用户”user_name”通过网桥”lxcbr0”创建虚拟网卡的最大数量，限定为”XX”</p>
<h2 id="修改LXC配置"><a href="#修改LXC配置" class="headerlink" title="修改LXC配置"></a>修改LXC配置</h2><p>以上工作完成后，需要进行配置文件的修改。</p>
<h3 id="检查文件夹"><a href="#检查文件夹" class="headerlink" title="检查文件夹"></a>检查文件夹</h3><p>如果目录 “<del>&#x2F;.config&#x2F;lxc”和”</del>&#x2F;.local&#x2F;share&#x2F;lxc”如果不存在，执行下面两条命令，创建目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.config/lxc</span><br><span class="line">mkdir -p ~/.local/share/lxc</span><br></pre></td></tr></table></figure>

<p>其中，”<del>&#x2F;.local&#x2F;share&#x2F;lxc”即为创建好的容器存储位置，”</del>&#x2F;.config&#x2F;lxc”是容器的配置文件存储位置。</p>
<h2 id="设定配置文件"><a href="#设定配置文件" class="headerlink" title="设定配置文件"></a>设定配置文件</h2><p>将LXC的默认配置文件 “&#x2F;etc&#x2F;lxc&#x2F;default.conf” 复制到 “~&#x2F;.config&#x2F;lxc&#x2F;default.conf”</p>
<p>并在最后添加两条配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lxc.id_map = u 0 100000 65536</span><br><span class="line">lxc.id_map = g 0 100000 65536</span><br></pre></td></tr></table></figure>

<p>需要注意的是，配置中的数字，均应和subuid及sungid对应起来，否则会出现错误。</p>
<h2 id="重启或重新登陆"><a href="#重启或重新登陆" class="headerlink" title="重启或重新登陆"></a>重启或重新登陆</h2><p>配置完以上内容后，建议重启，或者重新登陆，确保配置生效。</p>
<h1 id="创建并配置容器"><a href="#创建并配置容器" class="headerlink" title="创建并配置容器"></a>创建并配置容器</h1><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p>对于非特权容器，默认类型必须是”download”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lxc-create -t download -n XXXX -- --server mirrors6.tuna.tsinghua.edu.cn/lxc-images</span><br></pre></td></tr></table></figure>

<p>新创建的LXC容器名即为”XXXX”,通过清华大学的IPv6镜像服务器下载。</p>
<p>创建过程中，可以选择操作系统类型、版本、架构</p>
<h2 id="配置容器"><a href="#配置容器" class="headerlink" title="配置容器"></a>配置容器</h2><p>首先开启容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lxc-start -n XXXX -d</span><br></pre></td></tr></table></figure>

<p>-d表示以后台模式运行，”XXXX”即为创建的容器名</p>
<p>之后可以查看容器的状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lxc-info -n XXXX</span><br></pre></td></tr></table></figure>

<p>如果查看结果显示容器正在运行，说明配置及安装正确。</p>
<p>** 需要注意的是，非特权容器的用户密码并未设定 **<br>需要由宿主机进行设定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lxc-attach -n XXXX</span><br></pre></td></tr></table></figure>

<p>即可以root身份登入到”XXXX”容器中</p>
<p>然后就可以给默认用户设置密码、更改用户权限，LXC容器内的用户即可执行sudo等权限。</p>
]]></content>
      <categories>
        <category>log</category>
      </categories>
      <tags>
        <tag>实验室服务器搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>910实验室服务器配置-LXC容器复制</title>
    <url>/2017/12/19/2017-12-19-910%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE-LXC%E5%AE%B9%E5%99%A8%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<p>为减少容器的配置工作，为用户创建自己的容器之前，预先配置好了一个模板容器。其他用户的容器可以基于该模板进行创建。</p>
<p>在我们的配置中，有一个特殊点，就是容器中的&#x2F;home目录，与~&#x2F;SSD目录，是单独存储的。并且在LXC的配置测试中，发现如果在宿主机中进行其它mount操作，将导致LXC容器无法启动。所以，对以上涉及的几个目录，需要逐步修改config，并在容器内进行相应配置。</p>
<a id="more"></a>

<h2 id="正常启动容器"><a href="#正常启动容器" class="headerlink" title="正常启动容器"></a>正常启动容器</h2><p>首先取消容器内的所有挂载，然后正常启动容器。如果容器正常启动，则证明容器的内容没有基本错误。</p>
<h2 id="修改容器的主机名"><a href="#修改容器的主机名" class="headerlink" title="修改容器的主机名"></a>修改容器的主机名</h2><p>修改容器的rootfs&#x2F;etc&#x2F;hostname，修改继承的主机名。</p>
<p>同时修改容器的config文件中，lxc.utsname，改为与hostname同样的主机名。</p>
<p>重启容器，检查修改是否有效。</p>
<h2 id="挂载home目录"><a href="#挂载home目录" class="headerlink" title="挂载home目录"></a>挂载home目录</h2><p>停止容器，将rootfs&#x2F;home&#x2F; 下的全部文件移到设定的挂载目录。</p>
<p>修改config配置文件，添加对应的lxc.mount.entry配置，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lxc.mount.entry = /mnt/HDD/XXXX home none bind 0 0</span><br></pre></td></tr></table></figure>

<p>并且，将&#x2F;mnt&#x2F;HDD&#x2F;XXXX&#x2F;下的所有目录添加读、写、执行权限。</p>
<p>启动容器，检查是否正常。</p>
<h2 id="新建用户及用户目录"><a href="#新建用户及用户目录" class="headerlink" title="新建用户及用户目录"></a>新建用户及用户目录</h2><p>启动容器后，attach到容器内，以root身份创建用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -m -s /bin/bash XXXX</span><br></pre></td></tr></table></figure>

<p>添加新用户XXXX，并创建其用户目录。</p>
<p>在&#x2F;mnt&#x2F;HDD&#x2F;XXXX&#x2F;中，给新创建的用户目录赋予7777权限。</p>
<p>登录到新创建的用户，创建一个用于挂载其他路径的目录，在我们的使用中，新的挂载点是SSD。</p>
<h2 id="将其他目录挂载在新用户"><a href="#将其他目录挂载在新用户" class="headerlink" title="将其他目录挂载在新用户"></a>将其他目录挂载在新用户</h2><p>关闭容器。</p>
<p>更改容器的config文件，添加新的mount配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lxc.mount.entry = /mnt/SSD/XXXX home/XXXX/SSD none bind 0 0</span><br></pre></td></tr></table></figure>

<p>现在重新启动容器，检查挂载是否成功。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过以上几步，不仅将容器中的&#x2F;home目录转移到其它的可靠位置，也在用户目录下新添加了一个其他的挂载点，在使用中具有更好的效果。</p>
]]></content>
      <categories>
        <category>log</category>
      </categories>
      <tags>
        <tag>实验室服务器搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux服务器更换硬件后网卡无法识别解决</title>
    <url>/2018/03/03/2018-03-03-Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E6%8D%A2%E7%A1%AC%E4%BB%B6%E5%90%8E%E7%BD%91%E5%8D%A1%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h2 id="Linux服务器更换硬件后网卡无法识别解决"><a href="#Linux服务器更换硬件后网卡无法识别解决" class="headerlink" title="Linux服务器更换硬件后网卡无法识别解决"></a>Linux服务器更换硬件后网卡无法识别解决</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>最小化安装的Linux服务器进行硬件修改后，再重启出现硬件无法识别的问题，即原始配置中的eth0或enp<em>x</em>s<em>x</em>无法加载。</p>
<p>通过查阅相关资料，发现是网卡的标识出现了改变，导致原来的配置无法识别。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>检索最新的网卡编号，然后在配置文件中进行更新，重启网络服务，即可重新加载网络。</p>
<a id="more"></a>

<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p><strong>检索更新后的网卡信息</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip link</span><br></pre></td></tr></table></figure>

<p>显示的结果中，除了本地回环地址lo，还包含更新后的网卡名称，例如“enp<em>x</em>s<em>x</em>”</p>
<p><strong>更改网卡配置</strong><br>在网卡配置文件 &#x2F;etc&#x2F;networking&#x2F;interface 中更新网卡名称</p>
<p><strong>重启网络服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure>

<p>执行结束后，应该就可以连接网络了</p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Network Interface</tag>
      </tags>
  </entry>
  <entry>
    <title>910实验室服务器配置-LXC容器中时区设置</title>
    <url>/2018/06/23/2018-06-23-910%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE-LXC%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%97%B6%E5%8C%BA%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="在LXC容器中进行时区的设置"><a href="#在LXC容器中进行时区的设置" class="headerlink" title="在LXC容器中进行时区的设置"></a>在LXC容器中进行时区的设置</h2><p>虽然LXC容器在使用上和物理机没有区别，但是因为缺少安装过程中的配置操作，在一些配置上会出现问题。</p>
<p>比如时区的问题，虽然容器中的时间和宿主机的时间是对应的，但是容器中的默认时区为空，导致时间转换上存在不一致的问题。<br>以我们为例，宿主机上的时间是CST，也就是东八区时间；但是容器中默认为UTC+0时区，所以会有8小时的时差。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="在容器中进行时区配置"><a href="#在容器中进行时区配置" class="headerlink" title="在容器中进行时区配置"></a>在容器中进行时区配置</h3><p>之前试过导入时区等方式，但效果不太好。</p>
<p>最近发现有一个比较方便的方法，可以直接将时区修改为目标时区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure>

<p>在LXC容器中运行上面的命令，根据出现的辅助界面，选择Asian-&gt;Shanghai，即可完成时区的更改。</p>
<p>通过这种方式，即使容器和宿主机进行了重启，仍然可以确保时区的配置是有效的。</p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>910实验室服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>23岁，新的开始</title>
    <url>/2018/05/23/2018-05-23-23%E5%B2%81%EF%BC%8C%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<h1 id="23岁，新的开始"><a href="#23岁，新的开始" class="headerlink" title="23岁，新的开始"></a>23岁，新的开始</h1><ul>
<li>2018年5月23日，夏初时节的普通一天，北京的天气甚至有点儿凉意。</li>
<li>去年的今天，还在为毕业论文奋笔疾书，甚至压力已经大到无法在早上安然入睡。</li>
<li>5年前的今天，即将接受高考的洗礼，等待的是未知的结果，是无限的可能。</li>
</ul>
<a id="more"></a>
<ul>
<li>2018年的今天，开始学习新的方向，即将迎接最具有挑战性的一次团队合作。</li>
<li>2018年的今天，结束了自己人生中第一篇学术成果的发表过程，中间虽有波澜，好在万事顺利。</li>
<li>2018年的今天，硕士生涯的1&#x2F;3即将度过，剩下的时日不多，没有时间可以浑浑噩噩。</li>
</ul>
<h2 id="离开家的日子"><a href="#离开家的日子" class="headerlink" title="离开家的日子"></a>离开家的日子</h2><p>过完18岁的生日，结束高考的煎熬，惊险来到北京理工大学。从那以后，便没有了过生日的习惯。还没离开家乡的时候，自己怎么都是个孩子，即使体型和年龄都已经不再是孩子。但是，在父母的眼中，不管年纪多大，永远是曾经的那个小孩子。</p>
<p>可是，当离开了父母的庇护，来到广阔的空间，有一大把的事情需要自己决断。即使有委屈，即使不顺利，也要自己含泪坚持。总有一天，所有的事情都依靠自己；总有一天，父母也会离去；总有一天，自己也会成为父母。</p>
<h2 id="没有时间等待"><a href="#没有时间等待" class="headerlink" title="没有时间等待"></a>没有时间等待</h2><p>享受慢时光，享受惬意的人生，真的是一种非常令人向往的生活。也许有一天，心也累了，精力也不够了，过着茅舍、耕耘、犬吠、鸡鸣的生活，是一种最好的归宿。但对于我们一代人来说，在出生的那一刻，就已经具备了非常大的差距。90后的一代已经错过了资本发展最繁荣的时期，等待我们的是阶级的逐渐固化。当大城市已经被前辈们挤满，后来的我们如何在强者之间找到自己的立足之地？</p>
<p>我见过很多同学，在本科阶段的成绩还非常不错，但是到了硕士阶段却沉迷游戏，荒废科研。这种状态好吗？在二十多岁，脑力和精力最充沛的年龄，在接受多年专业教育后具备基本技能的时候，仍然以混学历的想法度过这几年，这样的青春真的是喂了狗了。</p>
<h2 id="坚持下去"><a href="#坚持下去" class="headerlink" title="坚持下去"></a>坚持下去</h2><p>每天比别人多付出一点，其实很痛苦，当他们可以娱乐休息，可以天南海北的时候，自己却要不断的学习新的内容。羡慕吗？会的。别人会羡慕吗？不确定。让自己的每一天都过得充实，每天都前进一点儿，虽然很累，虽然很痛苦，虽然很受伤。</p>
<h3 id="但我希望，在40岁的时候，不后悔自己20多岁的这几年。"><a href="#但我希望，在40岁的时候，不后悔自己20多岁的这几年。" class="headerlink" title="但我希望，在40岁的时候，不后悔自己20多岁的这几年。"></a>但我希望，在40岁的时候，不后悔自己20多岁的这几年。</h3>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>25岁，与命运对赌</title>
    <url>/2020/05/28/2020-05-28-25%E5%B2%81%EF%BC%8C%E4%B8%8E%E5%91%BD%E8%BF%90%E5%AF%B9%E8%B5%8C/</url>
    <content><![CDATA[<h2 id="又到了毕业季"><a href="#又到了毕业季" class="headerlink" title="又到了毕业季"></a>又到了毕业季</h2><p>提交了盲审的论文，交代完手头上的事情，突然间感觉心里空落落的。</p>
<a id="more"></a>
<p>三年前的这个时候，在本科毕业前夕，告别了熟悉的实验室，选择了一条模糊的道路。<br>现在看来，当时的选择也算不上是错误，其实有没有后悔只有自己知道。<br>对于我来说，其实还是比较希望稳定的生活，在熟悉的导师、熟悉的实验室读研，无疑能够避免很多麻烦。<br>在那一两个月里，我也曾后悔，总觉得是不是自己太匆忙了。</p>
<p>到了现在，想明白，其实变化才是正常的人生。<br>没有人能够保证，自己的舒适区能够永恒。<br>青蛙不是被煮死的，而是在准备跳出来的时候发现为时已晚。</p>
<h2 id="终于要告别校园"><a href="#终于要告别校园" class="headerlink" title="终于要告别校园"></a>终于要告别校园</h2><p>在北理工待了七年，过去的25年里，这是我就读时间最长的学校。<br>18岁到24岁的美好时光，全部留在了良乡和魏公村。<br>七年了，我已经熟悉了周围的点滴。</p>
<p>如果当时选择转博，在北理工的时间还能加几年。<br>但然后呢，我还舍得离开吗，我还敢做出改变吗？<br>在人生的路途上，没有不变的风景，只有不变的脚步。</p>
<p>也许在最终离开的时刻，证明了自己还是有能力的。<br>但自己也明白，真的有很大差异吗？<br>其实只不过是将其余的时间与精力，转换到日常的学习中，用刷题的方式积累出来的。</p>
<h2 id="未来，向何方"><a href="#未来，向何方" class="headerlink" title="未来，向何方"></a>未来，向何方</h2><p>最近，大概瞄了一眼大家的就业情况，发现国企事业单位和银行的比例还是蛮高的。<br>也许和性格有关，最近才明白自己一直在压抑自己，并且属于缺爱的人格。<br>所以，在做事风格上有独行侠味道，并且对自己特别狠，宽以待人严于律己。</p>
<p>这样的结果，是基本上不再依赖他人，和外界划出了一条清晰的界限。<br>好处呢，是对自己人生的决策权，所有决定的好坏一人承担。<br>既然看开了，无所谓对谁负责，最后是一无所有，还是卑微苟且，也不过如此嘛。</p>
<p>想在想想，也挺好笑的，曾经有一个主动活泼的姑娘，她大胆主动地来到我的身边，却被我的冷淡伤害。<br>也许那曾经是改变的好时机，可是，错过了也只能错过。<br>真的值得被爱吗，也无所谓了，太好的爱情被辜负也是大概率事情。<br>既然这样，未来怎么走，有什么关系吗，不管生死，不管沉浮，没有后顾之忧，没有舍不得的那个人。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>稀里糊涂写了很多，有些想法也没表达出来，多少也算个留念吧。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-459 Repeated Substring Pattern</title>
    <url>/2020/06/02/2020-06-02-Leetcode-459/</url>
    <content><![CDATA[<h2 id="459-Repeated-Substring-Pattern"><a href="#459-Repeated-Substring-Pattern" class="headerlink" title="459 Repeated Substring Pattern"></a>459 Repeated Substring Pattern</h2><p>判断字符串是否为子串重复构成，输入字符串的长度在10000内。</p>
<p>例如，’abab’由’ab’循环两次构成，’aa’由’a’循环两次构成。</p>
<a id="more"></a>

<h2 id="1-解决思路"><a href="#1-解决思路" class="headerlink" title="1. 解决思路"></a>1. 解决思路</h2><h3 id="1-1-双指针"><a href="#1-1-双指针" class="headerlink" title="1.1 双指针"></a>1.1 双指针</h3><p>双指针是最直接的方式，固定头指针的位置，移动尾指针，知道找到一个重复的子串，然后对剩余的部分进行子串验证。</p>
<p>如果字符串是由子串重复生成的，则一定存在一个最小子串。例如，’aaaa’由’aa’重复两次构成，同时也是’a’重复四次构成。但’aa’是’a’重复两次构成的，因此，识别出最小子串’a’即可。</p>
<p>双指针法的时间复杂度为O(n<sup>2</sup>)，空间复杂度为O(1)。</p>
<pre><code>bool repeatedSubstringPattern(char *s){
    if (s == NULL) {
        return false;
    }
    bool result = false;

    char *begin = s;
    char *end = s + 1;
    while (*end != 0) {
        while (*end != 0 &amp;&amp; *begin != *end) {
            ++ end;
        }
        if (*end == 0) {
            break;
        }

        char *temp_end = end;
        char *temp_begin = begin;
        while (*temp_end != 0 &amp;&amp; *temp_begin == *temp_end) {
            ++ temp_begin;
            ++ temp_end;
        }
        if (*temp_end == 0 &amp;&amp; (temp_end - end) % (end - begin) == 0) {
            result = true;
            break;
        }

        ++ end;
    }

    return result;
}
</code></pre>
<h3 id="1-2-掐头去尾"><a href="#1-2-掐头去尾" class="headerlink" title="1.2 掐头去尾"></a>1.2 掐头去尾</h3><p>假设一个字符串有子串重复构成，则第一个字符一定是子串的首字符，同时最后一个字符为子串的尾字符。</p>
<p>所谓掐头去尾，分别包括掐头和去尾两步。如果字符串由子串重复构成，则字符串中的子串至少出现一次，掐头则破坏了第一个子串，去尾则破坏了最后一个子串。将掐头及去尾的结果拼接，如果中间的部分与原字符串一致，则意味着符合重复条件。</p>
<p>例如，’abcabcabc’由’abc’重复三次构成，掐头后剩余’bcabcabc’，去尾后剩余’abcabcab’，拼接得到’bcabcabcabcabcab’，重复的结果只剩下四次。在’bcabcabcabcabcab’中搜索’abcabcabc’，如果匹配，则证明符合重复规则。</p>
<p>如果S由一系列子串构成，即S<sub>1</sub> S<sub>2</sub> S<sub>3</sub> …  S<sub>i</sub> … S<sub>n</sub>。如果S由子串重复构成，则S<sub>1</sub> &#x3D; S<sub>2</sub> &#x3D; S<sub>3</sub> &#x3D; S<sub>i</sub> &#x3D; S<sub>n</sub>。掐头即破坏S<sub>1</sub>，去尾即破坏S<sub>n</sub>，拼接后的构成为S<sub>2</sub> S<sub>3</sub> …  S<sub>i</sub> … S<sub>n</sub> S<sub>1</sub> S<sub>2</sub> S<sub>3</sub> …  S<sub>i</sub> … S<sub>n-1</sub>。当拼接结果中仍然存在S，则满足S<sub>2</sub> &#x3D; S<sub>1</sub>，S<sub>3</sub> &#x3D; S<sub>2</sub>，S<sub>i + 1</sub> &#x3D; S<sub>i</sub>，S<sub>n</sub> &#x3D; S<sub>n - 1</sub>，S<sub>n</sub> &#x3D; S<sub>1</sub>，汇总即S<sub>1</sub> &#x3D; S<sub>2</sub> &#x3D; S<sub>3</sub> &#x3D; S<sub>i</sub> &#x3D; S<sub>n</sub>。</p>
<p>掐头去尾的时间复杂度为O(n)，空间复杂度为O(n)。</p>
<pre><code>bool repeatedSubstringPattern(char *s){
    if (s == NULL) {
        return false;
    }
    bool result = false;

    int s_len = strlen(s);
    char *s_s = (char *)malloc(sizeof(char) * s_len * 2 - 2);

    memcpy_s(s_s, s_len * 2 - 2, s + 1, s_len - 1);
    memcpy_s(s_s + s_len - 1, s_len - 1, s, s_len - 1);

    for (int index = 0 ; index &lt;= s_len - 2 ; ++ index) {
        if (*s == *(s_s + index) &amp;&amp; memcmp(s, s_s + index, s_len) == 0) {
            result = true;
            break;
        }
    }

    free(s_s);
    return result;
}
</code></pre>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-463 Island Perimeter</title>
    <url>/2020/06/02/2020-06-02-Leetcode-463/</url>
    <content><![CDATA[<h2 id="463-Island-Perimeter"><a href="#463-Island-Perimeter" class="headerlink" title="463  Island Perimeter"></a>463  Island Perimeter</h2><p>给出岛屿地图，求解岛屿的周长。岛屿可能有多个块组成，所有的块连接成为一个大岛。</p>
<pre><code>[0,1,0,0]
[1,1,1,0]
[0,1,0,0]
[1,1,0,0]
</code></pre>
<a id="more"></a>

<h2 id="1-解决思路"><a href="#1-解决思路" class="headerlink" title="1. 解决思路"></a>1. 解决思路</h2><h3 id="1-1-两次遍历"><a href="#1-1-两次遍历" class="headerlink" title="1.1 两次遍历"></a>1.1 两次遍历</h3><p>根据岛屿的特征，只有出现0-1跳变的位置才存在边界，因此按照行序、列序进行两次遍历，对所有的跳变位置进行统计，即可得到最终的周长。</p>
<p>该方法的时间复杂度为O(n<sup>2</sup>)，空间复杂度为O(1)，但进行列序遍历时，由于Cache命中的问题，效率较低。</p>
<pre><code>int islandPerimeter(int** grid, int gridSize, int* gridColSize){
    if (grid == NULL || gridColSize == NULL || gridSize == 0) {
        return 0;
    }
    int result = 0;

    // for vertical borders
    for (int row = 0 ; row &lt; gridSize ; ++ row) {
        if (**(grid + row) == 1) {
            ++ result;
        }
        for (int col = 0 ; col &lt; *(gridColSize + row) - 1 ; ++ col) {
            if (*(*(grid + row) + col) != *(*(grid + row) + col + 1)) {
                ++ result;
            }
        }
        if (*(*(grid + row) + *(gridColSize + row) - 1) == 1) {
            ++ result;
        }
    }

    // for horizontal borders
    for (int col = 0 ; col &lt; *gridColSize ; ++ col) {
        if (*(*grid + col) == 1) {
            ++ result;
        }
        for (int row = 0 ; row &lt; gridSize - 1; ++ row) {
            if (*(*(grid + row) + col) != *(*(grid + row + 1) + col)) {
                ++ result;
            }
        }
        if (*(*(grid + gridSize - 1) + col) == 1) {
            ++ result;
        }
    }

    return result;
}
</code></pre>
<h3 id="1-2-关联遍历"><a href="#1-2-关联遍历" class="headerlink" title="1.2 关联遍历"></a>1.2 关联遍历</h3><p>对于单个位置来说，当没有相邻陆地时，存在4条边界。每存在一个相邻陆地，则两个陆地各减少一条边界。因此，遍历过程中，对相邻情况进行判断。按照左上角到右下角的顺序，判断是否为陆地。如果为陆地，则其右侧及下方是否为陆地。两者分别统计，得到的陆地数*4，减去相邻数*2，即为最终的边界周长。</p>
<p>该方法的时间复杂度为O(n<sup>2</sup>)，空间复杂度为O(1)，但遍历中Cache效率较低。</p>
<pre><code>int islandPerimeter(int** grid, int gridSize, int* gridColSize){
    if (grid == NULL || gridColSize == NULL || gridSize == 0) {
        return 0;
    }
    int result = 0;
    int inside = 0;

    for (int row = 0 ; row &lt; gridSize ; ++ row) {
        for (int col = 0 ; col &lt; *(gridColSize + row) ; ++ col) {
            if (*(*(grid + row) + col) == 1) {
                ++ result;

                if (col &lt; *(gridColSize + row) - 1 &amp;&amp; *(*(grid + row) + col + 1) == 1) {
                    ++ inside;
                }
                if (row &lt; gridSize - 1 &amp;&amp; *(*(grid + row + 1) + col) == 1) {
                    ++ inside;
                }
            }
        }
    }

    result = result * 4 - inside * 2;

    return result;
}
</code></pre>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Kernel之randomized layout</title>
    <url>/2020/12/20/2020-12-20-kernel-randomize-layout/</url>
    <content><![CDATA[<h2 id="randomized-layout"><a href="#randomized-layout" class="headerlink" title="randomized layout"></a>randomized layout</h2><p>在Linux Kernel的结构体声明中，经常会看见最后带了一个<code>__randomize_layout</code>标识。初次学习，对其机制不太了解，并且网上对其展开描述的内容也不是很多，只有一些英文文档中有介绍。因此，本博客里记录下学习的成果。</p>
<a id="more"></a>

<h2 id="结构体随机化"><a href="#结构体随机化" class="headerlink" title="结构体随机化"></a>结构体随机化</h2><p>不管是地址随机化，还是结构体随机化，其目的都是增强内核安全性。结构体随机化也是GCC编译器的一个重要特性，使能后将在编译时随机排布结构体中元素的顺序，从而使攻击者无法通过地址偏移进行攻击。（存疑，虽然运行时的结构排布与源码可能不一致，但通过结构元素的地址，仍然可以推断出排布形势，只能防范非自适应的攻击，是否可以这样理解？）</p>
<p>结构体随机化在编译时根据随机数种子打乱排布顺序，但一旦编译完成，结构体内容即确定。（存疑，既然编译时即确定，那么公开发行的二进制版本是可以被反向的，该保护机制是否还有效？以及，调试时，我们能否看到真实的结构体顺序?）</p>
<p>在Linux Kernel中，结构体中存在函数指针的部分是攻击者重点关注的对象。因此，只存储函数指针的结构体，是默认开启结构体随机化的，如果不需要，需要添加<code>__no_randomize_layout</code>进行排除。另一方面，如果特定结构体希望主动开启保护，需要添加<code>__randomize_layout</code>标识。</p>
<h2 id="结构体随机化后的差异"><a href="#结构体随机化后的差异" class="headerlink" title="结构体随机化后的差异"></a>结构体随机化后的差异</h2><ol>
<li>既然已经开启了结构体随机化，在进行赋值或初始化时，就需要按照元素名称进行赋值，否则会出现非预期结果。（designated initializers）</li>
<li>不要对开启了随机化的结构体指针或对象进行强制数据转换，因为内存排布是不可预测的。</li>
<li>涉及到远程调用的结构体，如果需要保证结构体内容的一致性，需要添加例外。</li>
<li>调试时，根据dump推算结构体内容将极为麻烦，因为每个版本、每个平台的布局都将不同。</li>
<li>部分以模块形式添加到Kernel中的驱动，为保持结构体一致性，在编译时需要采用与kernel相同的随机数种子，这带来了极大的安全风险。</li>
</ol>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>ARM体系结构之TCM</title>
    <url>/2020/12/20/2020-12-20-arm-TCM/</url>
    <content><![CDATA[<h2 id="Tightly-Coupled-Memory"><a href="#Tightly-Coupled-Memory" class="headerlink" title="Tightly-Coupled Memory"></a>Tightly-Coupled Memory</h2><p>TCM(Tightly-Coupled Memory)，紧耦合内存，位于SOC内部的片上存储区域，具有极低的访问延迟。类似于Cache，TCM也分为L1TCM和L2TCM。根据存储对象，TCM通常也分为ITMC和DTCM。在使用上，TCM与RAM具有相似的特征。</p>
<a id="more"></a>

<h2 id="TCM适用对象"><a href="#TCM适用对象" class="headerlink" title="TCM适用对象"></a>TCM适用对象</h2><p>TCM is used for a few things:</p>
<ul>
<li>FIQ and other interrupt handlers that need deterministic<br>timing and cannot wait for cache misses.</li>
<li>Idle loops where all external RAM is set to self-refresh<br>retention mode, so only on-chip RAM is accessible by<br>the CPU and then we hang inside ITCM waiting for an<br>interrupt.</li>
<li>Other operations which implies shutting off or reconfiguring<br>the external RAM controller.</li>
</ul>
<p>TCM适用于以下场景：</p>
<ul>
<li>快速中断，或其它不能接受Cache miss或需要确定执行时间的中断处理程序</li>
<li>当芯片进入低功耗模式时，RAM进入自刷新模式不可访问，只有TCM可以访问，IDLE进程需要在TCM中运行等待中断</li>
<li>其他需要在RAM不可访问阶段执行的程序</li>
</ul>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>arm</tag>
      </tags>
  </entry>
  <entry>
    <title>个人学术成果总结</title>
    <url>/2022/05/12/2022-05-12-%E4%B8%AA%E4%BA%BA%E5%AD%A6%E6%9C%AF%E6%88%90%E6%9E%9C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>硕士期间，主要的研究工作，为RTP中的时间隐通道构建方法，论文列表如下：</p>
<ol>
<li><p>硕士学位论文《基于主动丢包的VoLTE时间隐通道构建方法研究》</p>
<p>论文latex源码：<a href="https://github.com/XintingXu/master-degree-paper">https://github.com/XintingXu/master-degree-paper</a></p>
<p>论文实验代码源码：<a href="https://github.com/XintingXu/master-degree-code">https://github.com/XintingXu/master-degree-code</a></p>
<p>论文pdf：<a href="https://github.com/XintingXu/master-degree-paper/releases/download/v2.0.2/thesis.pdf">https://github.com/XintingXu/master-degree-paper/releases/download/v2.0.2/thesis.pdf</a></p>
</li>
<li><p>学术论文《A robust packet‐dropping covert channel for mobile intelligent terminals》</p>
<p>发表时间：2022年3月</p>
<p>发表期刊：International Journal of Intelligent Systems</p>
<p>网页链接：<a href="https://onlinelibrary.wiley.com/doi/abs/10.1002/int.22868">https://onlinelibrary.wiley.com/doi/abs/10.1002/int.22868</a></p>
</li>
<li><p>学术论文《An end-to-end covert channel via packet dropout for mobile networks》</p>
<p>发表时间：2018年5月</p>
<p>发表期刊：International Journal of Distributed Sensor Networks</p>
<p>网页链接：<a href="https://journals.sagepub.com/doi/full/10.1177/1550147718779568">https://journals.sagepub.com/doi/full/10.1177/1550147718779568</a></p>
</li>
<li><p>学术论文《A robust packet-dropout covert channel over wireless networks》</p>
<p>发表时间：2020年6月</p>
<p>发表期刊：IEEE Wireless Communications</p>
<p>网页链接：<a href="https://ieeexplore.ieee.org/abstract/document/9116089/">https://ieeexplore.ieee.org/abstract/document/9116089/</a></p>
</li>
<li><p>发明专利《一种基于主动丢包的时间隐通道鲁棒构建方法》</p>
<p>申请号：201910648138.5</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>时间隐通道</tag>
      </tags>
  </entry>
</search>
